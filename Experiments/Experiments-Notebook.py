{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# General Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python2.7/dist-packages/requests/__init__.py:83: RequestsDependencyWarning: Old version of cryptography ([1, 2, 3]) may cause slowdown.\n",
      "  warnings.warn(warning, RequestsDependencyWarning)\n"
     ]
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "import matplotlib\n",
    "from pca import analyze_componenets\n",
    "from tensorflow.keras.wrappers.scikit_learn import KerasClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "from sklearn.model_selection import StratifiedKFold, GridSearchCV, RandomizedSearchCV, RepeatedStratifiedKFold, cross_validate\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, \\\n",
    " f1_score, roc_auc_score, mean_absolute_error, make_scorer, brier_score_loss\n",
    "\n",
    "from tensorflow import keras\n",
    "\n",
    "from data_loader import load_data, load_frame\n",
    "from sklearn.model_selection import KFold\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# General Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_scoring():\n",
    "    return dict(accuracy=make_scorer(accuracy_score),\n",
    "                precision=make_scorer(precision_score),\n",
    "                recall=make_scorer(recall_score),\n",
    "                f1_score=make_scorer(f1_score),\n",
    "                roc_auc_scorer=make_scorer(roc_auc_score),\n",
    "                mean_absolute_error=make_scorer(mean_absolute_error),\n",
    "                brier_score=make_scorer(brier_score_loss))\n",
    "\n",
    "def create_model(optimizer='adam', activation='linear', init_mode='uniform'\n",
    "                 , dropout_rate=0.1, first_layer=40, second_layer=20, dim = None):\n",
    "    model = keras.Sequential()\n",
    "    model.add(keras.layers.Dropout(dropout_rate, input_shape=(dim,)))\n",
    "    model.add(keras.layers.Dense(first_layer, kernel_initializer=init_mode, activation=activation))\n",
    "    model.add(keras.layers.Dense(second_layer, kernel_initializer=init_mode, activation=activation))\n",
    "    model.add(keras.layers.Dense(5, kernel_initializer=init_mode, activation=activation))\n",
    "    model.add(keras.layers.Dense(2, kernel_initializer=init_mode, activation='softmax'))\n",
    "\n",
    "    model.compile(optimizer=optimizer,\n",
    "                  loss='sparse_categorical_crossentropy',\n",
    "                  metrics=['accuracy'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simpleGrid(coverage = False, grano_test = False, grano_production = False,\n",
    "               my_test = False, my_production = False):\n",
    "    print('Importing data')\n",
    "    data_x, data_y, features, number_of_features = load_data(effective_non_effective = True, coverage = coverage,\n",
    "                                                             grano_test = grano_test, grano_production = grano_production,\n",
    "                                                             my_test = my_test, my_production = my_production, scale = True)\n",
    "    \n",
    "    print(len(data_x))\n",
    "    print(number_of_features)\n",
    "    print('Import: DONE')\n",
    "\n",
    "    batch_size = [i*10 for i in range(1,20)]\n",
    "    activation = ['relu']\n",
    "    optimizer = ['Adam']\n",
    "    dropout_rate = [i*0.1 for i in range(1,5)] \n",
    "    first_layer = [i*10 for i in range(1,200)]\n",
    "    second_layer = [i*10 for i in range(1,150)]\n",
    "    #third_layer = [i*10 for i in range(1,100)]\n",
    "    #forth_layer = [i*10 for i in range(1,50)]\n",
    "\n",
    "    param_grid = dict(\n",
    "        batch_size=batch_size, optimizer=optimizer, activation=activation,\n",
    "        dropout_rate=dropout_rate, first_layer=first_layer,\n",
    "        second_layer=second_layer, dim = [number_of_features])\n",
    "    \n",
    "    \n",
    "    inner_cv = StratifiedKFold(n_splits=10, shuffle=True)\n",
    "    model = KerasClassifier(build_fn=create_model,verbose=0, epochs=2000, batch_size=50)\n",
    "\n",
    "    early_stopping_monitor = keras.callbacks.EarlyStopping(\n",
    "        monitor='accuracy', min_delta=0.0003, patience=10,\n",
    "        verbose=0, mode='max', restore_best_weights=True)\n",
    "\n",
    "\n",
    "    results = RandomizedSearchCV(\n",
    "        estimator=model, cv=inner_cv, param_distributions=param_grid,\n",
    "        scoring=get_scoring(), refit='roc_auc_scorer',verbose=0, n_jobs=-1, n_iter=10)\n",
    "\n",
    "    results.fit(data_x, data_y, callbacks=[early_stopping_monitor])\n",
    "\n",
    "\n",
    "    print(\"-----------------------------\")\n",
    "    print(results.cv_results_.get('mean_test_accuracy'))\n",
    "    print(max(results.cv_results_.get('mean_test_accuracy')))\n",
    "    print('The best configuration is {}'.format(results.best_params_))\n",
    "    config_index = np.argmax(results.cv_results_.get('mean_test_accuracy'))\n",
    "    print(config_index)\n",
    "    print(\"-----------------------------\")\n",
    "    accuracy = results.cv_results_.get('mean_test_accuracy')[config_index]\n",
    "    precision = results.cv_results_.get('mean_test_precision')[config_index] \n",
    "    recall = results.cv_results_.get('mean_test_recall')[config_index] \n",
    "    f1_score = results.cv_results_.get('mean_test_f1_score')[config_index] \n",
    "    roc_auc = results.cv_results_.get('mean_test_roc_auc_scorer')[config_index] \n",
    "    mae = results.cv_results_.get('mean_test_mean_absolute_error')[config_index] \n",
    "    brier = results.cv_results_.get('mean_test_brier_score')[config_index]\n",
    "\n",
    "    print(\"---------------------------------\")\n",
    "    print('Performances:\\n'\n",
    "          'Accuracy\\t {:.3f}\\n'\n",
    "          'Precision\\t {:.3f}\\n'\n",
    "          'Recall\\t {:.3f}\\n'\n",
    "          'F1 Score\\t {:.3f}\\n'\n",
    "          'ROC AUC\\t {:.3f}\\n'\n",
    "          'MAE\\t {:.3f}\\n'\n",
    "          'Brier Score\\t {:.3f}\\n'\n",
    "          .format(accuracy, precision, recall, f1_score, roc_auc, mae, brier))\n",
    "    print(\"---------------------------------\")\n",
    "\n",
    "    means = results.cv_results_.get('mean_test_accuracy')\n",
    "    params = results.cv_results_.get('params')\n",
    "    for mean, param in zip(means, params):\n",
    "        print(\"%f with: %r\" % (mean, param))\n",
    "    return ['{:.3f}'.format(accuracy),\n",
    "            '{:.3f}'.format(precision),\n",
    "            '{:.3f}'.format(recall),\n",
    "            '{:.3f}'.format(f1_score),\n",
    "            '{:.3f}'.format(roc_auc),\n",
    "            '{:.3f}'.format(mae),\n",
    "            '{:.3f}'.format(brier)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dynamic - All"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res = {}\n",
    "for i in range(0,11):\n",
    "    res[i] = simpleGrid(coverage = False, grano_test = True, grano_production = True,\n",
    "                        my_test = True, my_production = True)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: ['0.877', '0.860', '0.903', '0.880', '0.877', '0.123', '0.123'],\n",
       " 1: ['0.877', '0.864', '0.894', '0.878', '0.877', '0.123', '0.123'],\n",
       " 2: ['0.878', '0.861', '0.903', '0.880', '0.878', '0.122', '0.122'],\n",
       " 3: ['0.874', '0.859', '0.895', '0.876', '0.874', '0.126', '0.126'],\n",
       " 4: ['0.875', '0.862', '0.896', '0.877', '0.875', '0.125', '0.125'],\n",
       " 5: ['0.875', '0.863', '0.893', '0.877', '0.876', '0.125', '0.125'],\n",
       " 6: ['0.885', '0.871', '0.905', '0.887', '0.885', '0.115', '0.115'],\n",
       " 7: ['0.879', '0.863', '0.901', '0.881', '0.879', '0.121', '0.121'],\n",
       " 8: ['0.874', '0.868', '0.881', '0.874', '0.874', '0.126', '0.126'],\n",
       " 9: ['0.881', '0.871', '0.897', '0.883', '0.881', '0.119', '0.119'],\n",
       " 10: ['0.883', '0.867', '0.905', '0.885', '0.883', '0.117', '0.117']}"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res = {0: ['0.877', '0.860', '0.903', '0.880', '0.877', '0.123', '0.123'], 1: ['0.877', '0.864', '0.894', '0.878', '0.877', '0.123', '0.123'], 2: ['0.878', '0.861', '0.903', '0.880', '0.878', '0.122', '0.122'], 3: ['0.874', '0.859', '0.895', '0.876', '0.874', '0.126', '0.126'], 4: ['0.875', '0.862', '0.896', '0.877', '0.875', '0.125', '0.125'], 5: ['0.875', '0.863', '0.893', '0.877', '0.876', '0.125', '0.125'], 6: ['0.885', '0.871', '0.905', '0.887', '0.885', '0.115', '0.115'], 7: ['0.879', '0.863', '0.901', '0.881', '0.879', '0.121', '0.121'], 8: ['0.874', '0.868', '0.881', '0.874', '0.874', '0.126', '0.126'], 9: ['0.881', '0.871', '0.897', '0.883', '0.881', '0.119', '0.119'], 10: ['0.883', '0.867', '0.905', '0.885', '0.883', '0.117', '0.117']}\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:\n",
      "0.878\n",
      "0.352\n",
      "Precision:\n",
      "0.864\n",
      "0.401\n",
      "Recall:\n",
      "0.898\n",
      "0.673\n",
      "F1_Score:\n",
      "0.88\n",
      "0.379\n",
      "ROC_AUC:\n",
      "0.878\n",
      "0.345\n",
      "MAE:\n",
      "0.122\n",
      "0.352\n"
     ]
    }
   ],
   "source": [
    "Accuracy = []\n",
    "Precision = []\n",
    "Recall = []\n",
    "F1_Score = []\n",
    "ROC_AUC = []\n",
    "MAE = []\n",
    "Brier = []\n",
    "for e in res.itervalues():\n",
    "    Accuracy.append(float(e[0]))\n",
    "    Precision.append(float(e[1]))\n",
    "    Recall.append(float(e[2]))\n",
    "    F1_Score.append(float(e[3]))\n",
    "    ROC_AUC.append(float(e[4]))\n",
    "    MAE.append(float(e[5]))\n",
    "    Brier.append(float(e[6]))\n",
    "\n",
    "print(\"Accuracy:\")\n",
    "print(round(np.average(Accuracy),3))\n",
    "print(round(np.std(Accuracy)*100,3))\n",
    "\n",
    "print(\"Precision:\")\n",
    "print(round(np.average(Precision),3))\n",
    "print(round(np.std(Precision)*100,3))\n",
    "\n",
    "print(\"Recall:\")\n",
    "print(round(np.average(Recall),3))\n",
    "print(round(np.std(Recall)*100,3))\n",
    "\n",
    "print(\"F1_Score:\")\n",
    "print(round(np.average(F1_Score),3))\n",
    "print(round(np.std(F1_Score)*100,3))\n",
    "\n",
    "print(\"ROC_AUC:\")\n",
    "print(round(np.average(ROC_AUC),3))\n",
    "print(round(np.std(ROC_AUC)*100,3))\n",
    "\n",
    "print(\"MAE:\")\n",
    "print(round(np.average(MAE),3))\n",
    "print(round(np.std(MAE)*100,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Static - Production Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Importing data\n",
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.79050132 0.77941953 0.79630607 0.77150396 0.78522427 0.78575198\n",
      " 0.776781   0.7883905  0.79313984 0.7878628  0.77519789 0.78944591\n",
      " 0.7883905  0.77467018 0.78258575 0.78311346 0.76992084 0.78575198\n",
      " 0.78047493 0.77203166]\n",
      "0.7963060686015832\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 80, 'batch_size': 30, 'activation': 'relu', 'first_layer': 1040}\n",
      "2\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.796\n",
      "Precision\t 0.772\n",
      "Recall\t 0.846\n",
      "F1 Score\t 0.805\n",
      "ROC AUC\t 0.796\n",
      "MAE\t 0.204\n",
      "Brier Score\t 0.204\n",
      "\n",
      "---------------------------------\n",
      "0.790501 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1390, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1480}\n",
      "0.779420 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 260, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1830}\n",
      "0.796306 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 80, 'batch_size': 30, 'activation': 'relu', 'first_layer': 1040}\n",
      "0.771504 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1160, 'batch_size': 80, 'activation': 'relu', 'first_layer': 140}\n",
      "0.785224 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 200, 'batch_size': 120, 'activation': 'relu', 'first_layer': 520}\n",
      "0.785752 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1460, 'batch_size': 70, 'activation': 'relu', 'first_layer': 1080}\n",
      "0.776781 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1060, 'batch_size': 20, 'activation': 'relu', 'first_layer': 350}\n",
      "0.788391 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 280, 'batch_size': 70, 'activation': 'relu', 'first_layer': 780}\n",
      "0.793140 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1380, 'batch_size': 120, 'activation': 'relu', 'first_layer': 1200}\n",
      "0.787863 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 520, 'batch_size': 130, 'activation': 'relu', 'first_layer': 330}\n",
      "0.775198 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 480, 'batch_size': 160, 'activation': 'relu', 'first_layer': 830}\n",
      "0.789446 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 850, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1330}\n",
      "0.788391 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 260, 'batch_size': 90, 'activation': 'relu', 'first_layer': 50}\n",
      "0.774670 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1140, 'batch_size': 110, 'activation': 'relu', 'first_layer': 480}\n",
      "0.782586 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 660, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1020}\n",
      "0.783113 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1390, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1680}\n",
      "0.769921 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 280, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1370}\n",
      "0.785752 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 230, 'batch_size': 140, 'activation': 'relu', 'first_layer': 370}\n",
      "0.780475 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1060, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1430}\n",
      "0.772032 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 840, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1940}\n",
      "Importing data\n",
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.78469657 0.78258575 0.79050132 0.77467018 0.78733509 0.77467018\n",
      " 0.78522427 0.78733509 0.79419525 0.77783641 0.76042216 0.78627968\n",
      " 0.79472296 0.78100264 0.78416887 0.79419525 0.79841689 0.78153034\n",
      " 0.80316623 0.7878628 ]\n",
      "0.8031662269129287\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1040, 'batch_size': 40, 'activation': 'relu', 'first_layer': 950}\n",
      "18\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.803\n",
      "Precision\t 0.778\n",
      "Recall\t 0.850\n",
      "F1 Score\t 0.811\n",
      "ROC AUC\t 0.803\n",
      "MAE\t 0.197\n",
      "Brier Score\t 0.197\n",
      "\n",
      "---------------------------------\n",
      "0.784697 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1170, 'batch_size': 110, 'activation': 'relu', 'first_layer': 690}\n",
      "0.782586 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 870, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1400}\n",
      "0.790501 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1120, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1030}\n",
      "0.774670 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 940, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1220}\n",
      "0.787335 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 760, 'batch_size': 40, 'activation': 'relu', 'first_layer': 60}\n",
      "0.774670 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 660, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1780}\n",
      "0.785224 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 760, 'batch_size': 180, 'activation': 'relu', 'first_layer': 370}\n",
      "0.787335 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1100, 'batch_size': 110, 'activation': 'relu', 'first_layer': 100}\n",
      "0.794195 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1370, 'batch_size': 20, 'activation': 'relu', 'first_layer': 140}\n",
      "0.777836 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 730, 'batch_size': 120, 'activation': 'relu', 'first_layer': 1720}\n",
      "0.760422 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 430, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1760}\n",
      "0.786280 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 490, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1550}\n",
      "0.794723 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 300, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1170}\n",
      "0.781003 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 880, 'batch_size': 130, 'activation': 'relu', 'first_layer': 610}\n",
      "0.784169 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 540, 'batch_size': 100, 'activation': 'relu', 'first_layer': 760}\n",
      "0.794195 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 960, 'batch_size': 30, 'activation': 'relu', 'first_layer': 1870}\n",
      "0.798417 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1220, 'batch_size': 10, 'activation': 'relu', 'first_layer': 220}\n",
      "0.781530 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1080, 'batch_size': 150, 'activation': 'relu', 'first_layer': 20}\n",
      "0.803166 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1040, 'batch_size': 40, 'activation': 'relu', 'first_layer': 950}\n",
      "0.787863 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 990, 'batch_size': 120, 'activation': 'relu', 'first_layer': 830}\n",
      "Importing data\n",
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.7994723  0.77730871 0.77994723 0.79366755 0.78469657 0.77941953\n",
      " 0.78205805 0.77203166 0.77730871 0.78627968 0.79841689 0.79155673\n",
      " 0.78997361 0.776781   0.7762533  0.78100264 0.78469657 0.77941953\n",
      " 0.79208443 0.78100264]\n",
      "0.7994722955145118\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 140, 'batch_size': 190, 'activation': 'relu', 'first_layer': 120}\n",
      "0\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.799\n",
      "Precision\t 0.781\n",
      "Recall\t 0.834\n",
      "F1 Score\t 0.806\n",
      "ROC AUC\t 0.800\n",
      "MAE\t 0.201\n",
      "Brier Score\t 0.201\n",
      "\n",
      "---------------------------------\n",
      "0.799472 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 140, 'batch_size': 190, 'activation': 'relu', 'first_layer': 120}\n",
      "0.777309 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 90, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1710}\n",
      "0.779947 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 890, 'batch_size': 120, 'activation': 'relu', 'first_layer': 900}\n",
      "0.793668 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1440, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1670}\n",
      "0.784697 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 670, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1260}\n",
      "0.779420 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 390, 'batch_size': 20, 'activation': 'relu', 'first_layer': 210}\n",
      "0.782058 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1150, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1600}\n",
      "0.772032 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 330, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1850}\n",
      "0.777309 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 150, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1510}\n",
      "0.786280 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 360, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1990}\n",
      "0.798417 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 250, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1000}\n",
      "0.791557 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 230, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1560}\n",
      "0.789974 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1410, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1900}\n",
      "0.776781 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 160, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1720}\n",
      "0.776253 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 120, 'batch_size': 110, 'activation': 'relu', 'first_layer': 1880}\n",
      "0.781003 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1400, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1530}\n",
      "0.784697 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 340, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1170}\n",
      "0.779420 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 870, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1070}\n",
      "0.792084 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 910, 'batch_size': 70, 'activation': 'relu', 'first_layer': 720}\n",
      "0.781003 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1050, 'batch_size': 160, 'activation': 'relu', 'first_layer': 560}\n",
      "Importing data\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.78680739 0.79261214 0.79525066 0.78469657 0.80105541 0.79366755\n",
      " 0.77836412 0.79208443 0.79050132 0.77519789 0.78733509 0.79630607\n",
      " 0.76939314 0.80105541 0.78997361 0.79577836 0.79313984 0.79313984\n",
      " 0.78153034 0.79261214]\n",
      "0.8010554089709763\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 990, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1060}\n",
      "4\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.801\n",
      "Precision\t 0.781\n",
      "Recall\t 0.839\n",
      "F1 Score\t 0.808\n",
      "ROC AUC\t 0.801\n",
      "MAE\t 0.199\n",
      "Brier Score\t 0.199\n",
      "\n",
      "---------------------------------\n",
      "0.786807 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 610, 'batch_size': 140, 'activation': 'relu', 'first_layer': 880}\n",
      "0.792612 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 960, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1490}\n",
      "0.795251 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 270, 'batch_size': 170, 'activation': 'relu', 'first_layer': 690}\n",
      "0.784697 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1120, 'batch_size': 150, 'activation': 'relu', 'first_layer': 890}\n",
      "0.801055 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 990, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1060}\n",
      "0.793668 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 380, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1840}\n",
      "0.778364 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1030, 'batch_size': 100, 'activation': 'relu', 'first_layer': 890}\n",
      "0.792084 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 700, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1470}\n",
      "0.790501 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1360, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1490}\n",
      "0.775198 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 60, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1880}\n",
      "0.787335 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 40, 'batch_size': 140, 'activation': 'relu', 'first_layer': 60}\n",
      "0.796306 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 460, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1040}\n",
      "0.769393 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 860, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1960}\n",
      "0.801055 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1310, 'batch_size': 20, 'activation': 'relu', 'first_layer': 850}\n",
      "0.789974 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 470, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1010}\n",
      "0.795778 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1320, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1780}\n",
      "0.793140 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1430, 'batch_size': 10, 'activation': 'relu', 'first_layer': 720}\n",
      "0.793140 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 440, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1220}\n",
      "0.781530 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 830, 'batch_size': 40, 'activation': 'relu', 'first_layer': 890}\n",
      "0.792612 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1150, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1750}\n",
      "Importing data\n",
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.77414248 0.78311346 0.78997361 0.79577836 0.79419525 0.78575198\n",
      " 0.78944591 0.78575198 0.78733509 0.78944591 0.79841689 0.77308707\n",
      " 0.79155673 0.7878628  0.78575198 0.79419525 0.79525066 0.78416887\n",
      " 0.79261214 0.76833773]\n",
      "0.7984168865435356\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 520, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1280}\n",
      "10\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.798\n",
      "Precision\t 0.771\n",
      "Recall\t 0.848\n",
      "F1 Score\t 0.807\n",
      "ROC AUC\t 0.799\n",
      "MAE\t 0.202\n",
      "Brier Score\t 0.202\n",
      "\n",
      "---------------------------------\n",
      "0.774142 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 300, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1720}\n",
      "0.783113 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1210, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1800}\n",
      "0.789974 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1480, 'batch_size': 170, 'activation': 'relu', 'first_layer': 500}\n",
      "0.795778 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 650, 'batch_size': 100, 'activation': 'relu', 'first_layer': 160}\n",
      "0.794195 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 710, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1650}\n",
      "0.785752 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 410, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1720}\n",
      "0.789446 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 120, 'batch_size': 20, 'activation': 'relu', 'first_layer': 910}\n",
      "0.785752 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 830, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1600}\n",
      "0.787335 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 70, 'batch_size': 80, 'activation': 'relu', 'first_layer': 680}\n",
      "0.789446 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 110, 'batch_size': 160, 'activation': 'relu', 'first_layer': 760}\n",
      "0.798417 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 520, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1280}\n",
      "0.773087 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 150, 'batch_size': 120, 'activation': 'relu', 'first_layer': 850}\n",
      "0.791557 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 530, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1020}\n",
      "0.787863 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 590, 'batch_size': 160, 'activation': 'relu', 'first_layer': 70}\n",
      "0.785752 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 610, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1760}\n",
      "0.794195 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 210, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1750}\n",
      "0.795251 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1000, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1540}\n",
      "0.784169 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 50, 'batch_size': 90, 'activation': 'relu', 'first_layer': 840}\n",
      "0.792612 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 640, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1520}\n",
      "0.768338 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1460, 'batch_size': 150, 'activation': 'relu', 'first_layer': 80}\n",
      "Importing data\n",
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.79736148 0.79102902 0.79472296 0.78522427 0.7651715  0.78522427\n",
      " 0.78153034 0.78891821 0.77203166 0.78469657 0.79261214 0.78258575\n",
      " 0.78680739 0.78680739 0.78258575 0.79208443 0.77994723 0.78944591\n",
      " 0.76622691 0.77730871]\n",
      "0.7973614775725594\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1040, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1410}\n",
      "0\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.797\n",
      "Precision\t 0.785\n",
      "Recall\t 0.821\n",
      "F1 Score\t 0.801\n",
      "ROC AUC\t 0.797\n",
      "MAE\t 0.203\n",
      "Brier Score\t 0.203\n",
      "\n",
      "---------------------------------\n",
      "0.797361 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1040, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1410}\n",
      "0.791029 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 150, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1520}\n",
      "0.794723 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 890, 'batch_size': 20, 'activation': 'relu', 'first_layer': 130}\n",
      "0.785224 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1280, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1300}\n",
      "0.765172 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1440, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1120}\n",
      "0.785224 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1100, 'batch_size': 160, 'activation': 'relu', 'first_layer': 190}\n",
      "0.781530 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1290, 'batch_size': 150, 'activation': 'relu', 'first_layer': 780}\n",
      "0.788918 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1080, 'batch_size': 190, 'activation': 'relu', 'first_layer': 880}\n",
      "0.772032 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 790, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1880}\n",
      "0.784697 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 470, 'batch_size': 110, 'activation': 'relu', 'first_layer': 700}\n",
      "0.792612 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 120, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1920}\n",
      "0.782586 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1410, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1240}\n",
      "0.786807 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 720, 'batch_size': 40, 'activation': 'relu', 'first_layer': 580}\n",
      "0.786807 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1200, 'batch_size': 70, 'activation': 'relu', 'first_layer': 1330}\n",
      "0.782586 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 990, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1240}\n",
      "0.792084 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 810, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1980}\n",
      "0.779947 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1200, 'batch_size': 50, 'activation': 'relu', 'first_layer': 260}\n",
      "0.789446 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 300, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1640}\n",
      "0.766227 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 90, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1480}\n",
      "0.777309 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 140, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1530}\n",
      "Importing data\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.77203166 0.78575198 0.77414248 0.78627968 0.79050132 0.77730871\n",
      " 0.78522427 0.77203166 0.78627968 0.79683377 0.79155673 0.78205805\n",
      " 0.78047493 0.78258575 0.78522427 0.79577836 0.77572559 0.80211082\n",
      " 0.7883905  0.79683377]\n",
      "0.8021108179419525\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1050, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1870}\n",
      "17\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.802\n",
      "Precision\t 0.791\n",
      "Recall\t 0.823\n",
      "F1 Score\t 0.805\n",
      "ROC AUC\t 0.802\n",
      "MAE\t 0.198\n",
      "Brier Score\t 0.198\n",
      "\n",
      "---------------------------------\n",
      "0.772032 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1300, 'batch_size': 30, 'activation': 'relu', 'first_layer': 690}\n",
      "0.785752 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 480, 'batch_size': 180, 'activation': 'relu', 'first_layer': 790}\n",
      "0.774142 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 990, 'batch_size': 130, 'activation': 'relu', 'first_layer': 280}\n",
      "0.786280 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 490, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1330}\n",
      "0.790501 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1130, 'batch_size': 30, 'activation': 'relu', 'first_layer': 1470}\n",
      "0.777309 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 870, 'batch_size': 20, 'activation': 'relu', 'first_layer': 230}\n",
      "0.785224 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 500, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1390}\n",
      "0.772032 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 370, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1760}\n",
      "0.786280 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 780, 'batch_size': 150, 'activation': 'relu', 'first_layer': 140}\n",
      "0.796834 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 990, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1700}\n",
      "0.791557 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 520, 'batch_size': 140, 'activation': 'relu', 'first_layer': 970}\n",
      "0.782058 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 860, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1340}\n",
      "0.780475 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 140, 'batch_size': 30, 'activation': 'relu', 'first_layer': 250}\n",
      "0.782586 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1190, 'batch_size': 60, 'activation': 'relu', 'first_layer': 700}\n",
      "0.785224 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 430, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1670}\n",
      "0.795778 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 400, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1230}\n",
      "0.775726 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 120, 'batch_size': 140, 'activation': 'relu', 'first_layer': 420}\n",
      "0.802111 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1050, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1870}\n",
      "0.788391 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1030, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1100}\n",
      "0.796834 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1140, 'batch_size': 10, 'activation': 'relu', 'first_layer': 280}\n",
      "Importing data\n",
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.77889182 0.79261214 0.78469657 0.79155673 0.7762533  0.77783641\n",
      " 0.78205805 0.77783641 0.78733509 0.78680739 0.78416887 0.78680739\n",
      " 0.77519789 0.77467018 0.79366755 0.78627968 0.76886544 0.78311346\n",
      " 0.78891821 0.79102902]\n",
      "0.7936675461741425\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 450, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1980}\n",
      "14\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.794\n",
      "Precision\t 0.764\n",
      "Recall\t 0.848\n",
      "F1 Score\t 0.803\n",
      "ROC AUC\t 0.794\n",
      "MAE\t 0.206\n",
      "Brier Score\t 0.206\n",
      "\n",
      "---------------------------------\n",
      "0.778892 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 650, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1580}\n",
      "0.792612 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 630, 'batch_size': 100, 'activation': 'relu', 'first_layer': 760}\n",
      "0.784697 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 750, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1920}\n",
      "0.791557 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 440, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1740}\n",
      "0.776253 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 570, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1810}\n",
      "0.777836 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 750, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1480}\n",
      "0.782058 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 470, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1470}\n",
      "0.777836 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1080, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1520}\n",
      "0.787335 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 160, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1230}\n",
      "0.786807 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 530, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1810}\n",
      "0.784169 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1090, 'batch_size': 110, 'activation': 'relu', 'first_layer': 1560}\n",
      "0.786807 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1260, 'batch_size': 100, 'activation': 'relu', 'first_layer': 350}\n",
      "0.775198 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 810, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1520}\n",
      "0.774670 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 480, 'batch_size': 170, 'activation': 'relu', 'first_layer': 760}\n",
      "0.793668 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 450, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1980}\n",
      "0.786280 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 490, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1990}\n",
      "0.768865 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 90, 'batch_size': 120, 'activation': 'relu', 'first_layer': 350}\n",
      "0.783113 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 470, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1000}\n",
      "0.788918 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 850, 'batch_size': 90, 'activation': 'relu', 'first_layer': 180}\n",
      "0.791029 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 90, 'batch_size': 20, 'activation': 'relu', 'first_layer': 800}\n",
      "Importing data\n",
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.77361478 0.79313984 0.78891821 0.79155673 0.78153034 0.77308707\n",
      " 0.78997361 0.79050132 0.77730871 0.78469657 0.8005277  0.78047493\n",
      " 0.80158311 0.80422164 0.77203166 0.7878628  0.78100264 0.78047493\n",
      " 0.78891821 0.79683377]\n",
      "0.804221635883905\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1160, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1630}\n",
      "13\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.804\n",
      "Precision\t 0.785\n",
      "Recall\t 0.840\n",
      "F1 Score\t 0.811\n",
      "ROC AUC\t 0.804\n",
      "MAE\t 0.196\n",
      "Brier Score\t 0.196\n",
      "\n",
      "---------------------------------\n",
      "0.773615 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 900, 'batch_size': 90, 'activation': 'relu', 'first_layer': 540}\n",
      "0.793140 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 800, 'batch_size': 160, 'activation': 'relu', 'first_layer': 450}\n",
      "0.788918 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 210, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1750}\n",
      "0.791557 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 980, 'batch_size': 70, 'activation': 'relu', 'first_layer': 1610}\n",
      "0.781530 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1120, 'batch_size': 130, 'activation': 'relu', 'first_layer': 210}\n",
      "0.773087 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1120, 'batch_size': 100, 'activation': 'relu', 'first_layer': 60}\n",
      "0.789974 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 350, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1510}\n",
      "0.790501 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 920, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1460}\n",
      "0.777309 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1140, 'batch_size': 120, 'activation': 'relu', 'first_layer': 1910}\n",
      "0.784697 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 770, 'batch_size': 70, 'activation': 'relu', 'first_layer': 1400}\n",
      "0.800528 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1210, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1140}\n",
      "0.780475 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1190, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1990}\n",
      "0.801583 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 970, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1110}\n",
      "0.804222 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1160, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1630}\n",
      "0.772032 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 70, 'batch_size': 160, 'activation': 'relu', 'first_layer': 340}\n",
      "0.787863 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 800, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1770}\n",
      "0.781003 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 70, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1840}\n",
      "0.780475 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1040, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1070}\n",
      "0.788918 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 710, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1620}\n",
      "0.796834 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 850, 'batch_size': 40, 'activation': 'relu', 'first_layer': 890}\n",
      "Importing data\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.77994723 0.79208443 0.78997361 0.78522427 0.79102902 0.7878628\n",
      " 0.79050132 0.79155673 0.80158311 0.78311346 0.79472296 0.79841689\n",
      " 0.79630607 0.79577836 0.78944591 0.79050132 0.77994723 0.78575198\n",
      " 0.78891821 0.79155673]\n",
      "0.8015831134564644\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 730, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1300}\n",
      "8\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.802\n",
      "Precision\t 0.780\n",
      "Recall\t 0.843\n",
      "F1 Score\t 0.809\n",
      "ROC AUC\t 0.802\n",
      "MAE\t 0.198\n",
      "Brier Score\t 0.198\n",
      "\n",
      "---------------------------------\n",
      "0.779947 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 270, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1230}\n",
      "0.792084 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 380, 'batch_size': 10, 'activation': 'relu', 'first_layer': 700}\n",
      "0.789974 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 960, 'batch_size': 60, 'activation': 'relu', 'first_layer': 70}\n",
      "0.785224 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 180, 'batch_size': 50, 'activation': 'relu', 'first_layer': 520}\n",
      "0.791029 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 890, 'batch_size': 20, 'activation': 'relu', 'first_layer': 340}\n",
      "0.787863 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 710, 'batch_size': 30, 'activation': 'relu', 'first_layer': 790}\n",
      "0.790501 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 960, 'batch_size': 30, 'activation': 'relu', 'first_layer': 370}\n",
      "0.791557 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 140, 'batch_size': 60, 'activation': 'relu', 'first_layer': 790}\n",
      "0.801583 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 730, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1300}\n",
      "0.783113 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 320, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1770}\n",
      "0.794723 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 630, 'batch_size': 10, 'activation': 'relu', 'first_layer': 350}\n",
      "0.798417 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1020, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1610}\n",
      "0.796306 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 30, 'batch_size': 70, 'activation': 'relu', 'first_layer': 1190}\n",
      "0.795778 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 800, 'batch_size': 60, 'activation': 'relu', 'first_layer': 470}\n",
      "0.789446 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 630, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1090}\n",
      "0.790501 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1080, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1460}\n",
      "0.779947 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1320, 'batch_size': 170, 'activation': 'relu', 'first_layer': 500}\n",
      "0.785752 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 900, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1420}\n",
      "0.788918 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 200, 'batch_size': 190, 'activation': 'relu', 'first_layer': 170}\n",
      "0.791557 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 430, 'batch_size': 110, 'activation': 'relu', 'first_layer': 760}\n",
      "Importing data\n",
      "1895\n",
      "69\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.7883905  0.79525066 0.80738786 0.79313984 0.75725594 0.79630607\n",
      " 0.79366755 0.78469657 0.78364116 0.79683377 0.78997361 0.78258575\n",
      " 0.78522427 0.79102902 0.79313984 0.77836412 0.79894459 0.78311346\n",
      " 0.79050132 0.77941953]\n",
      "0.8073878627968337\n",
      "The best configuration is {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 230, 'batch_size': 90, 'activation': 'relu', 'first_layer': 850}\n",
      "2\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.807\n",
      "Precision\t 0.783\n",
      "Recall\t 0.849\n",
      "F1 Score\t 0.814\n",
      "ROC AUC\t 0.808\n",
      "MAE\t 0.193\n",
      "Brier Score\t 0.193\n",
      "\n",
      "---------------------------------\n",
      "0.788391 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 760, 'batch_size': 180, 'activation': 'relu', 'first_layer': 380}\n",
      "0.795251 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 690, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1600}\n",
      "0.807388 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 230, 'batch_size': 90, 'activation': 'relu', 'first_layer': 850}\n",
      "0.793140 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 460, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1160}\n",
      "0.757256 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 470, 'batch_size': 170, 'activation': 'relu', 'first_layer': 230}\n",
      "0.796306 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 550, 'batch_size': 30, 'activation': 'relu', 'first_layer': 60}\n",
      "0.793668 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 970, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1920}\n",
      "0.784697 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 350, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1940}\n",
      "0.783641 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 740, 'batch_size': 70, 'activation': 'relu', 'first_layer': 150}\n",
      "0.796834 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1360, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1400}\n",
      "0.789974 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 740, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1720}\n",
      "0.782586 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 820, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1060}\n",
      "0.785224 with: {'dim': 69, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 280, 'batch_size': 40, 'activation': 'relu', 'first_layer': 990}\n",
      "0.791029 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 530, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1700}\n",
      "0.793140 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 190, 'batch_size': 170, 'activation': 'relu', 'first_layer': 600}\n",
      "0.778364 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 340, 'batch_size': 20, 'activation': 'relu', 'first_layer': 450}\n",
      "0.798945 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1180, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1860}\n",
      "0.783113 with: {'dim': 69, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1240, 'batch_size': 160, 'activation': 'relu', 'first_layer': 170}\n",
      "0.790501 with: {'dim': 69, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 790, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1020}\n",
      "0.779420 with: {'dim': 69, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 300, 'batch_size': 50, 'activation': 'relu', 'first_layer': 830}\n",
      "{0: ['0.796', '0.772', '0.846', '0.805', '0.796', '0.204', '0.204'], 1: ['0.803', '0.778', '0.850', '0.811', '0.803', '0.197', '0.197'], 2: ['0.799', '0.781', '0.834', '0.806', '0.800', '0.201', '0.201'], 3: ['0.801', '0.781', '0.839', '0.808', '0.801', '0.199', '0.199'], 4: ['0.798', '0.771', '0.848', '0.807', '0.799', '0.202', '0.202'], 5: ['0.797', '0.785', '0.821', '0.801', '0.797', '0.203', '0.203'], 6: ['0.802', '0.791', '0.823', '0.805', '0.802', '0.198', '0.198'], 7: ['0.794', '0.764', '0.848', '0.803', '0.794', '0.206', '0.206'], 8: ['0.804', '0.785', '0.840', '0.811', '0.804', '0.196', '0.196'], 9: ['0.802', '0.780', '0.843', '0.809', '0.802', '0.198', '0.198'], 10: ['0.807', '0.783', '0.849', '0.814', '0.808', '0.193', '0.193']}\n"
     ]
    }
   ],
   "source": [
    "res = {}\n",
    "for i in range(0,11):\n",
    "    res[i] = simpleGrid(coverage = False, grano_test = True, grano_production = True,\n",
    "                        my_test = True, my_production = True)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:\n",
      "0.933\n",
      "0.254\n",
      "Precision:\n",
      "0.916\n",
      "0.697\n",
      "Recall:\n",
      "0.954\n",
      "0.532\n",
      "F1_Score:\n",
      "0.934\n",
      "0.225\n",
      "ROC_AUC:\n",
      "0.933\n",
      "0.254\n",
      "MAE:\n",
      "0.067\n",
      "0.254\n"
     ]
    }
   ],
   "source": [
    "res = {0: ['0.931', '0.913', '0.952', '0.932', '0.931', '0.069', '0.069'], 1: ['0.935', '0.912', '0.964', '0.937', '0.935', '0.065', '0.065'], 2: ['0.931', '0.912', '0.956', '0.933', '0.931', '0.069', '0.069'], 3: ['0.930', '0.905', '0.961', '0.932', '0.930', '0.070', '0.070'], 4: ['0.928', '0.907', '0.955', '0.930', '0.928', '0.072', '0.072'], 5: ['0.935', '0.927', '0.944', '0.935', '0.935', '0.065', '0.065'], 6: ['0.936', '0.921', '0.953', '0.937', '0.936', '0.064', '0.064'], 7: ['0.934', '0.916', '0.956', '0.935', '0.934', '0.066', '0.066'], 8: ['0.936', '0.928', '0.947', '0.937', '0.936', '0.064', '0.064'], 9: ['0.934', '0.916', '0.954', '0.935', '0.934', '0.066', '0.066'], 10: ['0.932', '0.914', '0.954', '0.933', '0.932', '0.068', '0.068']}\n",
    "\n",
    "Accuracy = []\n",
    "Precision = []\n",
    "Recall = []\n",
    "F1_Score = []\n",
    "ROC_AUC = []\n",
    "MAE = []\n",
    "Brier = []\n",
    "for e in res.itervalues():\n",
    "    Accuracy.append(float(e[0]))\n",
    "    Precision.append(float(e[1]))\n",
    "    Recall.append(float(e[2]))\n",
    "    F1_Score.append(float(e[3]))\n",
    "    ROC_AUC.append(float(e[4]))\n",
    "    MAE.append(float(e[5]))\n",
    "    Brier.append(float(e[6]))\n",
    "\n",
    "print(\"Accuracy:\")\n",
    "print(round(np.average(Accuracy),3))\n",
    "print(round(np.std(Accuracy)*100,3))\n",
    "\n",
    "print(\"Precision:\")\n",
    "print(round(np.average(Precision),3))\n",
    "print(round(np.std(Precision)*100,3))\n",
    "\n",
    "print(\"Recall:\")\n",
    "print(round(np.average(Recall),3))\n",
    "print(round(np.std(Recall)*100,3))\n",
    "\n",
    "print(\"F1_Score:\")\n",
    "print(round(np.average(F1_Score),3))\n",
    "print(round(np.std(F1_Score)*100,3))\n",
    "\n",
    "print(\"ROC_AUC:\")\n",
    "print(round(np.average(ROC_AUC),3))\n",
    "print(round(np.std(ROC_AUC)*100,3))\n",
    "\n",
    "print(\"MAE:\")\n",
    "print(round(np.average(MAE),3))\n",
    "print(round(np.std(MAE)*100,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Static - Light"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res = {}\n",
    "for i in range(0,11):\n",
    "    res[i] = simpleGrid(coverage = False, grano_test = True, grano_production = True,\n",
    "                        my_test = False, my_production = False)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dynamic - Light"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Importing data\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "data_loader.py:170: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  frame_low['mutation'] = 0\n",
      "data_loader.py:171: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  frame_high['mutation'] = 1\n",
      "/usr/local/lib/python2.7/dist-packages/sklearn/preprocessing/data.py:645: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by StandardScaler.\n",
      "  return self.partial_fit(X, y)\n",
      "data_loader.py:294: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by StandardScaler.\n",
      "  data_x = scaler.transform(data_x)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.91926121 0.92559367 0.92770449 0.9292876  0.93034301 0.92453826\n",
      " 0.93034301 0.92612137 0.92770449 0.92295515 0.92242744 0.92137203\n",
      " 0.92717678 0.92401055 0.92453826 0.93087071 0.92401055 0.9292876\n",
      " 0.92401055 0.91978892]\n",
      "0.9308707124010555\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 30, 'batch_size': 190, 'activation': 'relu', 'first_layer': 450}\n",
      "15\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.931\n",
      "Precision\t 0.913\n",
      "Recall\t 0.952\n",
      "F1 Score\t 0.932\n",
      "ROC AUC\t 0.931\n",
      "MAE\t 0.069\n",
      "Brier Score\t 0.069\n",
      "\n",
      "---------------------------------\n",
      "0.919261 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 100, 'batch_size': 160, 'activation': 'relu', 'first_layer': 700}\n",
      "0.925594 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1580, 'batch_size': 40, 'activation': 'relu', 'first_layer': 690}\n",
      "0.927704 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 830, 'batch_size': 130, 'activation': 'relu', 'first_layer': 240}\n",
      "0.929288 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1680, 'batch_size': 150, 'activation': 'relu', 'first_layer': 930}\n",
      "0.930343 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 830, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1640}\n",
      "0.924538 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 420, 'batch_size': 190, 'activation': 'relu', 'first_layer': 740}\n",
      "0.930343 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 910, 'batch_size': 80, 'activation': 'relu', 'first_layer': 910}\n",
      "0.926121 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 50, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1740}\n",
      "0.927704 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1480, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1940}\n",
      "0.922955 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 930, 'batch_size': 20, 'activation': 'relu', 'first_layer': 920}\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1930, 'batch_size': 120, 'activation': 'relu', 'first_layer': 770}\n",
      "0.921372 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 860, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1190}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1860, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1660}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1950, 'batch_size': 100, 'activation': 'relu', 'first_layer': 400}\n",
      "0.924538 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 550, 'batch_size': 120, 'activation': 'relu', 'first_layer': 940}\n",
      "0.930871 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 30, 'batch_size': 190, 'activation': 'relu', 'first_layer': 450}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1450, 'batch_size': 110, 'activation': 'relu', 'first_layer': 860}\n",
      "0.929288 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1970, 'batch_size': 120, 'activation': 'relu', 'first_layer': 1030}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1080, 'batch_size': 150, 'activation': 'relu', 'first_layer': 290}\n",
      "0.919789 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1320, 'batch_size': 30, 'activation': 'relu', 'first_layer': 700}\n",
      "Importing data\n",
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.92348285 0.92506596 0.9292876  0.92506596 0.92189974 0.92717678\n",
      " 0.92189974 0.92612137 0.91556728 0.92823219 0.92401055 0.91926121\n",
      " 0.93034301 0.92717678 0.92559367 0.92664908 0.92717678 0.93509235\n",
      " 0.93403694 0.92189974]\n",
      "0.9350923482849605\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1020, 'batch_size': 90, 'activation': 'relu', 'first_layer': 20}\n",
      "17\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.935\n",
      "Precision\t 0.912\n",
      "Recall\t 0.964\n",
      "F1 Score\t 0.937\n",
      "ROC AUC\t 0.935\n",
      "MAE\t 0.065\n",
      "Brier Score\t 0.065\n",
      "\n",
      "---------------------------------\n",
      "0.923483 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 950, 'batch_size': 20, 'activation': 'relu', 'first_layer': 150}\n",
      "0.925066 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 830, 'batch_size': 130, 'activation': 'relu', 'first_layer': 330}\n",
      "0.929288 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1860, 'batch_size': 180, 'activation': 'relu', 'first_layer': 400}\n",
      "0.925066 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1020, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1610}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 970, 'batch_size': 90, 'activation': 'relu', 'first_layer': 40}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1860, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1020}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1180, 'batch_size': 160, 'activation': 'relu', 'first_layer': 670}\n",
      "0.926121 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1320, 'batch_size': 60, 'activation': 'relu', 'first_layer': 370}\n",
      "0.915567 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1350, 'batch_size': 100, 'activation': 'relu', 'first_layer': 480}\n",
      "0.928232 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1810, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1800}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 750, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1970}\n",
      "0.919261 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 830, 'batch_size': 140, 'activation': 'relu', 'first_layer': 20}\n",
      "0.930343 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1610, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1360}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 770, 'batch_size': 30, 'activation': 'relu', 'first_layer': 20}\n",
      "0.925594 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1610, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1040}\n",
      "0.926649 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1600, 'batch_size': 130, 'activation': 'relu', 'first_layer': 400}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 200, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1560}\n",
      "0.935092 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1020, 'batch_size': 90, 'activation': 'relu', 'first_layer': 20}\n",
      "0.934037 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1660, 'batch_size': 140, 'activation': 'relu', 'first_layer': 150}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1800, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1220}\n",
      "Importing data\n",
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.92453826 0.92242744 0.92559367 0.93087071 0.92189974 0.92717678\n",
      " 0.92137203 0.91451187 0.91134565 0.92717678 0.92559367 0.92612137\n",
      " 0.92295515 0.93139842 0.92453826 0.92084433 0.92506596 0.9171504\n",
      " 0.92506596 0.92823219]\n",
      "0.9313984168865436\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 140, 'batch_size': 120, 'activation': 'relu', 'first_layer': 1590}\n",
      "13\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.931\n",
      "Precision\t 0.912\n",
      "Recall\t 0.956\n",
      "F1 Score\t 0.933\n",
      "ROC AUC\t 0.931\n",
      "MAE\t 0.069\n",
      "Brier Score\t 0.069\n",
      "\n",
      "---------------------------------\n",
      "0.924538 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1670, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1130}\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 340, 'batch_size': 20, 'activation': 'relu', 'first_layer': 580}\n",
      "0.925594 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1920, 'batch_size': 10, 'activation': 'relu', 'first_layer': 820}\n",
      "0.930871 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1780, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1230}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 30, 'batch_size': 20, 'activation': 'relu', 'first_layer': 160}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 540, 'batch_size': 20, 'activation': 'relu', 'first_layer': 240}\n",
      "0.921372 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1790, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1430}\n",
      "0.914512 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 240, 'batch_size': 40, 'activation': 'relu', 'first_layer': 70}\n",
      "0.911346 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 610, 'batch_size': 20, 'activation': 'relu', 'first_layer': 140}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 380, 'batch_size': 90, 'activation': 'relu', 'first_layer': 220}\n",
      "0.925594 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1010, 'batch_size': 80, 'activation': 'relu', 'first_layer': 870}\n",
      "0.926121 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 490, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1380}\n",
      "0.922955 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1820, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1380}\n",
      "0.931398 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 140, 'batch_size': 120, 'activation': 'relu', 'first_layer': 1590}\n",
      "0.924538 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 820, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1620}\n",
      "0.920844 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1730, 'batch_size': 70, 'activation': 'relu', 'first_layer': 620}\n",
      "0.925066 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 990, 'batch_size': 10, 'activation': 'relu', 'first_layer': 210}\n",
      "0.917150 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1020, 'batch_size': 150, 'activation': 'relu', 'first_layer': 170}\n",
      "0.925066 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1860, 'batch_size': 190, 'activation': 'relu', 'first_layer': 470}\n",
      "0.928232 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 490, 'batch_size': 130, 'activation': 'relu', 'first_layer': 660}\n",
      "Importing data\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.92559367 0.92823219 0.92242744 0.9176781  0.91978892 0.92084433\n",
      " 0.92453826 0.91873351 0.9060686  0.92189974 0.92612137 0.92348285\n",
      " 0.92453826 0.92664908 0.92612137 0.91873351 0.9298153  0.9182058\n",
      " 0.92559367 0.9182058 ]\n",
      "0.9298153034300791\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1910, 'batch_size': 80, 'activation': 'relu', 'first_layer': 760}\n",
      "16\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.930\n",
      "Precision\t 0.905\n",
      "Recall\t 0.961\n",
      "F1 Score\t 0.932\n",
      "ROC AUC\t 0.930\n",
      "MAE\t 0.070\n",
      "Brier Score\t 0.070\n",
      "\n",
      "---------------------------------\n",
      "0.925594 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1790, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1410}\n",
      "0.928232 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 320, 'batch_size': 70, 'activation': 'relu', 'first_layer': 150}\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1130, 'batch_size': 50, 'activation': 'relu', 'first_layer': 170}\n",
      "0.917678 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1890, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1970}\n",
      "0.919789 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1750, 'batch_size': 90, 'activation': 'relu', 'first_layer': 170}\n",
      "0.920844 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1670, 'batch_size': 110, 'activation': 'relu', 'first_layer': 210}\n",
      "0.924538 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 380, 'batch_size': 50, 'activation': 'relu', 'first_layer': 200}\n",
      "0.918734 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1270, 'batch_size': 20, 'activation': 'relu', 'first_layer': 630}\n",
      "0.906069 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 280, 'batch_size': 170, 'activation': 'relu', 'first_layer': 10}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1860, 'batch_size': 80, 'activation': 'relu', 'first_layer': 630}\n",
      "0.926121 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 300, 'batch_size': 70, 'activation': 'relu', 'first_layer': 260}\n",
      "0.923483 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 390, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1760}\n",
      "0.924538 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1090, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1720}\n",
      "0.926649 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1650, 'batch_size': 60, 'activation': 'relu', 'first_layer': 920}\n",
      "0.926121 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 190, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1820}\n",
      "0.918734 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 40, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1640}\n",
      "0.929815 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1910, 'batch_size': 80, 'activation': 'relu', 'first_layer': 760}\n",
      "0.918206 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 360, 'batch_size': 10, 'activation': 'relu', 'first_layer': 760}\n",
      "0.925594 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 430, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1020}\n",
      "0.918206 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 10, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1950}\n",
      "Importing data\n",
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.9176781  0.92084433 0.92453826 0.92189974 0.92612137 0.91978892\n",
      " 0.91556728 0.92664908 0.91873351 0.92137203 0.91451187 0.91345646\n",
      " 0.91873351 0.92453826 0.92770449 0.92031662 0.92295515 0.92031662\n",
      " 0.92401055 0.9171504 ]\n",
      "0.9277044854881267\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 690, 'batch_size': 100, 'activation': 'relu', 'first_layer': 10}\n",
      "14\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.928\n",
      "Precision\t 0.907\n",
      "Recall\t 0.955\n",
      "F1 Score\t 0.930\n",
      "ROC AUC\t 0.928\n",
      "MAE\t 0.072\n",
      "Brier Score\t 0.072\n",
      "\n",
      "---------------------------------\n",
      "0.917678 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 870, 'batch_size': 150, 'activation': 'relu', 'first_layer': 890}\n",
      "0.920844 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 760, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1060}\n",
      "0.924538 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 300, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1000}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 230, 'batch_size': 90, 'activation': 'relu', 'first_layer': 820}\n",
      "0.926121 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1770, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1120}\n",
      "0.919789 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1560, 'batch_size': 120, 'activation': 'relu', 'first_layer': 280}\n",
      "0.915567 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 400, 'batch_size': 140, 'activation': 'relu', 'first_layer': 210}\n",
      "0.926649 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 790, 'batch_size': 120, 'activation': 'relu', 'first_layer': 250}\n",
      "0.918734 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 810, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1880}\n",
      "0.921372 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 620, 'batch_size': 70, 'activation': 'relu', 'first_layer': 1140}\n",
      "0.914512 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 630, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1820}\n",
      "0.913456 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1500, 'batch_size': 70, 'activation': 'relu', 'first_layer': 740}\n",
      "0.918734 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 140, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1770}\n",
      "0.924538 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1880, 'batch_size': 180, 'activation': 'relu', 'first_layer': 50}\n",
      "0.927704 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 690, 'batch_size': 100, 'activation': 'relu', 'first_layer': 10}\n",
      "0.920317 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 210, 'batch_size': 180, 'activation': 'relu', 'first_layer': 550}\n",
      "0.922955 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1320, 'batch_size': 30, 'activation': 'relu', 'first_layer': 650}\n",
      "0.920317 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1040, 'batch_size': 190, 'activation': 'relu', 'first_layer': 510}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1750, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1000}\n",
      "0.917150 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1970, 'batch_size': 60, 'activation': 'relu', 'first_layer': 470}\n",
      "Importing data\n",
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.92189974 0.92664908 0.92242744 0.92823219 0.93245383 0.92717678\n",
      " 0.93456464 0.91926121 0.92559367 0.92242744 0.92137203 0.92875989\n",
      " 0.93139842 0.92717678 0.92453826 0.92295515 0.92823219 0.9292876\n",
      " 0.92295515 0.92664908]\n",
      "0.9345646437994723\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1900, 'batch_size': 20, 'activation': 'relu', 'first_layer': 490}\n",
      "6\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.935\n",
      "Precision\t 0.927\n",
      "Recall\t 0.944\n",
      "F1 Score\t 0.935\n",
      "ROC AUC\t 0.935\n",
      "MAE\t 0.065\n",
      "Brier Score\t 0.065\n",
      "\n",
      "---------------------------------\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 640, 'batch_size': 110, 'activation': 'relu', 'first_layer': 1550}\n",
      "0.926649 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 410, 'batch_size': 140, 'activation': 'relu', 'first_layer': 730}\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 550, 'batch_size': 10, 'activation': 'relu', 'first_layer': 220}\n",
      "0.928232 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1040, 'batch_size': 30, 'activation': 'relu', 'first_layer': 40}\n",
      "0.932454 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1780, 'batch_size': 180, 'activation': 'relu', 'first_layer': 770}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1440, 'batch_size': 110, 'activation': 'relu', 'first_layer': 1900}\n",
      "0.934565 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1900, 'batch_size': 20, 'activation': 'relu', 'first_layer': 490}\n",
      "0.919261 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1230, 'batch_size': 120, 'activation': 'relu', 'first_layer': 540}\n",
      "0.925594 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1420, 'batch_size': 120, 'activation': 'relu', 'first_layer': 1070}\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 330, 'batch_size': 140, 'activation': 'relu', 'first_layer': 330}\n",
      "0.921372 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1160, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1250}\n",
      "0.928760 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 860, 'batch_size': 190, 'activation': 'relu', 'first_layer': 550}\n",
      "0.931398 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1890, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1570}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 750, 'batch_size': 20, 'activation': 'relu', 'first_layer': 150}\n",
      "0.924538 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 690, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1910}\n",
      "0.922955 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1960, 'batch_size': 190, 'activation': 'relu', 'first_layer': 240}\n",
      "0.928232 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 10, 'batch_size': 160, 'activation': 'relu', 'first_layer': 660}\n",
      "0.929288 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1000, 'batch_size': 20, 'activation': 'relu', 'first_layer': 1900}\n",
      "0.922955 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1140, 'batch_size': 110, 'activation': 'relu', 'first_layer': 420}\n",
      "0.926649 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1460, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1480}\n",
      "Importing data\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.92506596 0.92401055 0.92612137 0.92242744 0.92506596 0.93034301\n",
      " 0.91451187 0.92770449 0.93245383 0.93614776 0.92295515 0.92031662\n",
      " 0.92875989 0.92348285 0.92875989 0.9292876  0.92453826 0.92717678\n",
      " 0.92717678 0.92401055]\n",
      "0.9361477572559367\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 70, 'batch_size': 100, 'activation': 'relu', 'first_layer': 880}\n",
      "9\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.936\n",
      "Precision\t 0.921\n",
      "Recall\t 0.953\n",
      "F1 Score\t 0.937\n",
      "ROC AUC\t 0.936\n",
      "MAE\t 0.064\n",
      "Brier Score\t 0.064\n",
      "\n",
      "---------------------------------\n",
      "0.925066 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1730, 'batch_size': 120, 'activation': 'relu', 'first_layer': 500}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1440, 'batch_size': 60, 'activation': 'relu', 'first_layer': 1380}\n",
      "0.926121 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1780, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1700}\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 30, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1290}\n",
      "0.925066 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 510, 'batch_size': 130, 'activation': 'relu', 'first_layer': 40}\n",
      "0.930343 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1880, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1100}\n",
      "0.914512 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 110, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1600}\n",
      "0.927704 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1480, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1670}\n",
      "0.932454 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1520, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1630}\n",
      "0.936148 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 70, 'batch_size': 100, 'activation': 'relu', 'first_layer': 880}\n",
      "0.922955 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1340, 'batch_size': 150, 'activation': 'relu', 'first_layer': 240}\n",
      "0.920317 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1510, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1200}\n",
      "0.928760 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 650, 'batch_size': 20, 'activation': 'relu', 'first_layer': 870}\n",
      "0.923483 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1570, 'batch_size': 180, 'activation': 'relu', 'first_layer': 310}\n",
      "0.928760 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 410, 'batch_size': 120, 'activation': 'relu', 'first_layer': 450}\n",
      "0.929288 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1700, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1910}\n",
      "0.924538 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 430, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1020}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1580, 'batch_size': 80, 'activation': 'relu', 'first_layer': 110}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1940, 'batch_size': 10, 'activation': 'relu', 'first_layer': 940}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1080, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1930}\n",
      "Importing data\n",
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.91662269 0.92295515 0.91873351 0.92506596 0.92031662 0.92664908\n",
      " 0.92031662 0.92401055 0.92664908 0.92189974 0.92770449 0.92189974\n",
      " 0.92401055 0.92189974 0.92189974 0.93350923 0.92137203 0.92664908\n",
      " 0.92664908 0.92770449]\n",
      "0.933509234828496\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1900, 'batch_size': 130, 'activation': 'relu', 'first_layer': 680}\n",
      "15\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.934\n",
      "Precision\t 0.916\n",
      "Recall\t 0.956\n",
      "F1 Score\t 0.935\n",
      "ROC AUC\t 0.934\n",
      "MAE\t 0.066\n",
      "Brier Score\t 0.066\n",
      "\n",
      "---------------------------------\n",
      "0.916623 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1820, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1480}\n",
      "0.922955 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 370, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1360}\n",
      "0.918734 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 380, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1690}\n",
      "0.925066 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1050, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1280}\n",
      "0.920317 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1790, 'batch_size': 10, 'activation': 'relu', 'first_layer': 110}\n",
      "0.926649 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1210, 'batch_size': 130, 'activation': 'relu', 'first_layer': 760}\n",
      "0.920317 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1500, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1090}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1020, 'batch_size': 20, 'activation': 'relu', 'first_layer': 750}\n",
      "0.926649 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1220, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1460}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1520, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1950}\n",
      "0.927704 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 910, 'batch_size': 110, 'activation': 'relu', 'first_layer': 1100}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 960, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1060}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 440, 'batch_size': 190, 'activation': 'relu', 'first_layer': 610}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1920, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1950}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 50, 'batch_size': 120, 'activation': 'relu', 'first_layer': 1690}\n",
      "0.933509 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1900, 'batch_size': 130, 'activation': 'relu', 'first_layer': 680}\n",
      "0.921372 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 660, 'batch_size': 160, 'activation': 'relu', 'first_layer': 690}\n",
      "0.926649 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 650, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1330}\n",
      "0.926649 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1710, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1610}\n",
      "0.927704 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1440, 'batch_size': 110, 'activation': 'relu', 'first_layer': 1650}\n",
      "Importing data\n",
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.92031662 0.92348285 0.92717678 0.93614776 0.92242744 0.9176781\n",
      " 0.9298153  0.93087071 0.92242744 0.92348285 0.93245383 0.92612137\n",
      " 0.92770449 0.92823219 0.92664908 0.92401055 0.92717678 0.92559367\n",
      " 0.91556728 0.92770449]\n",
      "0.9361477572559367\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1610, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1300}\n",
      "3\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.936\n",
      "Precision\t 0.928\n",
      "Recall\t 0.947\n",
      "F1 Score\t 0.937\n",
      "ROC AUC\t 0.936\n",
      "MAE\t 0.064\n",
      "Brier Score\t 0.064\n",
      "\n",
      "---------------------------------\n",
      "0.920317 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1240, 'batch_size': 70, 'activation': 'relu', 'first_layer': 490}\n",
      "0.923483 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 690, 'batch_size': 180, 'activation': 'relu', 'first_layer': 1130}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 590, 'batch_size': 30, 'activation': 'relu', 'first_layer': 1500}\n",
      "0.936148 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1610, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1300}\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 620, 'batch_size': 190, 'activation': 'relu', 'first_layer': 510}\n",
      "0.917678 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1120, 'batch_size': 100, 'activation': 'relu', 'first_layer': 1820}\n",
      "0.929815 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1510, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1660}\n",
      "0.930871 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 670, 'batch_size': 50, 'activation': 'relu', 'first_layer': 630}\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1080, 'batch_size': 30, 'activation': 'relu', 'first_layer': 110}\n",
      "0.923483 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 650, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1040}\n",
      "0.932454 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 210, 'batch_size': 190, 'activation': 'relu', 'first_layer': 200}\n",
      "0.926121 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 840, 'batch_size': 90, 'activation': 'relu', 'first_layer': 650}\n",
      "0.927704 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 900, 'batch_size': 170, 'activation': 'relu', 'first_layer': 330}\n",
      "0.928232 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1560, 'batch_size': 130, 'activation': 'relu', 'first_layer': 350}\n",
      "0.926649 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 240, 'batch_size': 30, 'activation': 'relu', 'first_layer': 1310}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 920, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1490}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 210, 'batch_size': 180, 'activation': 'relu', 'first_layer': 230}\n",
      "0.925594 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 380, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1780}\n",
      "0.915567 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 880, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1610}\n",
      "0.927704 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 230, 'batch_size': 40, 'activation': 'relu', 'first_layer': 1560}\n",
      "Importing data\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.92242744 0.92559367 0.92506596 0.92084433 0.93192612 0.91451187\n",
      " 0.92401055 0.92612137 0.91503958 0.9298153  0.92137203 0.92612137\n",
      " 0.92401055 0.92506596 0.92189974 0.91556728 0.92770449 0.9292876\n",
      " 0.93034301 0.93350923]\n",
      "0.933509234828496\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1170, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1700}\n",
      "19\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.934\n",
      "Precision\t 0.916\n",
      "Recall\t 0.954\n",
      "F1 Score\t 0.935\n",
      "ROC AUC\t 0.934\n",
      "MAE\t 0.066\n",
      "Brier Score\t 0.066\n",
      "\n",
      "---------------------------------\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 580, 'batch_size': 90, 'activation': 'relu', 'first_layer': 390}\n",
      "0.925594 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 150, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1610}\n",
      "0.925066 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1820, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1610}\n",
      "0.920844 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 470, 'batch_size': 170, 'activation': 'relu', 'first_layer': 270}\n",
      "0.931926 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1370, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1320}\n",
      "0.914512 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 670, 'batch_size': 130, 'activation': 'relu', 'first_layer': 890}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1040, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1350}\n",
      "0.926121 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1240, 'batch_size': 10, 'activation': 'relu', 'first_layer': 950}\n",
      "0.915040 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 790, 'batch_size': 120, 'activation': 'relu', 'first_layer': 30}\n",
      "0.929815 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1540, 'batch_size': 80, 'activation': 'relu', 'first_layer': 1250}\n",
      "0.921372 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 900, 'batch_size': 190, 'activation': 'relu', 'first_layer': 1070}\n",
      "0.926121 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1310, 'batch_size': 50, 'activation': 'relu', 'first_layer': 1460}\n",
      "0.924011 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 310, 'batch_size': 10, 'activation': 'relu', 'first_layer': 1450}\n",
      "0.925066 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1460, 'batch_size': 90, 'activation': 'relu', 'first_layer': 1070}\n",
      "0.921900 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 590, 'batch_size': 30, 'activation': 'relu', 'first_layer': 70}\n",
      "0.915567 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1670, 'batch_size': 110, 'activation': 'relu', 'first_layer': 550}\n",
      "0.927704 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1830, 'batch_size': 190, 'activation': 'relu', 'first_layer': 400}\n",
      "0.929288 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 220, 'batch_size': 100, 'activation': 'relu', 'first_layer': 330}\n",
      "0.930343 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 210, 'batch_size': 80, 'activation': 'relu', 'first_layer': 550}\n",
      "0.933509 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1170, 'batch_size': 170, 'activation': 'relu', 'first_layer': 1700}\n",
      "Importing data\n",
      "1895\n",
      "65\n",
      "Import: DONE\n",
      "-----------------------------\n",
      "[0.92084433 0.9292876  0.92031662 0.92242744 0.91503958 0.93192612\n",
      " 0.93034301 0.92770449 0.91240106 0.9298153  0.92242744 0.91609499\n",
      " 0.92875989 0.92559367 0.92717678 0.92717678 0.9298153  0.92348285\n",
      " 0.92137203 0.92348285]\n",
      "0.9319261213720317\n",
      "The best configuration is {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 290, 'batch_size': 90, 'activation': 'relu', 'first_layer': 310}\n",
      "5\n",
      "-----------------------------\n",
      "---------------------------------\n",
      "Performances:\n",
      "Accuracy\t 0.932\n",
      "Precision\t 0.914\n",
      "Recall\t 0.954\n",
      "F1 Score\t 0.933\n",
      "ROC AUC\t 0.932\n",
      "MAE\t 0.068\n",
      "Brier Score\t 0.068\n",
      "\n",
      "---------------------------------\n",
      "0.920844 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1810, 'batch_size': 190, 'activation': 'relu', 'first_layer': 250}\n",
      "0.929288 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1100, 'batch_size': 70, 'activation': 'relu', 'first_layer': 1950}\n",
      "0.920317 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1220, 'batch_size': 90, 'activation': 'relu', 'first_layer': 190}\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1220, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1220}\n",
      "0.915040 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 960, 'batch_size': 120, 'activation': 'relu', 'first_layer': 170}\n",
      "0.931926 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 290, 'batch_size': 90, 'activation': 'relu', 'first_layer': 310}\n",
      "0.930343 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 530, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1740}\n",
      "0.927704 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 360, 'batch_size': 30, 'activation': 'relu', 'first_layer': 860}\n",
      "0.912401 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 800, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1120}\n",
      "0.929815 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 650, 'batch_size': 10, 'activation': 'relu', 'first_layer': 990}\n",
      "0.922427 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 1840, 'batch_size': 150, 'activation': 'relu', 'first_layer': 1010}\n",
      "0.916095 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 950, 'batch_size': 130, 'activation': 'relu', 'first_layer': 750}\n",
      "0.928760 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 1310, 'batch_size': 10, 'activation': 'relu', 'first_layer': 980}\n",
      "0.925594 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 80, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1260}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.2, 'optimizer': 'Adam', 'second_layer': 330, 'batch_size': 140, 'activation': 'relu', 'first_layer': 1800}\n",
      "0.927177 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1800, 'batch_size': 130, 'activation': 'relu', 'first_layer': 1880}\n",
      "0.929815 with: {'dim': 65, 'dropout_rate': 0.1, 'optimizer': 'Adam', 'second_layer': 1540, 'batch_size': 160, 'activation': 'relu', 'first_layer': 1700}\n",
      "0.923483 with: {'dim': 65, 'dropout_rate': 0.30000000000000004, 'optimizer': 'Adam', 'second_layer': 390, 'batch_size': 10, 'activation': 'relu', 'first_layer': 360}\n",
      "0.921372 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 1020, 'batch_size': 80, 'activation': 'relu', 'first_layer': 450}\n",
      "0.923483 with: {'dim': 65, 'dropout_rate': 0.4, 'optimizer': 'Adam', 'second_layer': 960, 'batch_size': 30, 'activation': 'relu', 'first_layer': 420}\n",
      "{0: ['0.931', '0.913', '0.952', '0.932', '0.931', '0.069', '0.069'], 1: ['0.935', '0.912', '0.964', '0.937', '0.935', '0.065', '0.065'], 2: ['0.931', '0.912', '0.956', '0.933', '0.931', '0.069', '0.069'], 3: ['0.930', '0.905', '0.961', '0.932', '0.930', '0.070', '0.070'], 4: ['0.928', '0.907', '0.955', '0.930', '0.928', '0.072', '0.072'], 5: ['0.935', '0.927', '0.944', '0.935', '0.935', '0.065', '0.065'], 6: ['0.936', '0.921', '0.953', '0.937', '0.936', '0.064', '0.064'], 7: ['0.934', '0.916', '0.956', '0.935', '0.934', '0.066', '0.066'], 8: ['0.936', '0.928', '0.947', '0.937', '0.936', '0.064', '0.064'], 9: ['0.934', '0.916', '0.954', '0.935', '0.934', '0.066', '0.066'], 10: ['0.932', '0.914', '0.954', '0.933', '0.932', '0.068', '0.068']}\n"
     ]
    }
   ],
   "source": [
    "res = {}\n",
    "for i in range(0,11):\n",
    "    res[i] = simpleGrid(coverage = True, grano_test = True, grano_production = True,\n",
    "                        my_test = False, my_production = False)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "def separate_sets(complete_frame='merged_frame.csv', delimiter='quartile',\n",
    "                  name_good='good_tests_merged', name_bad='bad_tests_merged'):\n",
    "    \"\"\"\n",
    "    It separates\n",
    "    :param complete_frame: the frame to read with the metrics\n",
    "    :param delimiter: the valued used to split the sets\n",
    "    :param name_good: the name for the frame with the effective tests\n",
    "    :param name_bad: the name for the frame with the non effective tests\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    frame = pd.read_csv(complete_frame)\n",
    "    median = frame.mutation.median()\n",
    "    quantiles = frame.mutation.quantile([0.25, 0.75])\n",
    "    lower_quantile = quantiles[0.25]\n",
    "    upper_quantile = quantiles[0.75]\n",
    "\n",
    "    if delimiter == 'quartile':\n",
    "        bad_tests = frame[frame['mutation'] <= lower_quantile]\n",
    "        good_tests = frame[frame['mutation'] >= upper_quantile]\n",
    "        bad_tests.to_csv('{}.csv'.format(name_good), index=False)\n",
    "        good_tests.to_csv('{}.csv'.format(name_bad), index=False)\n",
    "        print(\"* Good tests quantile = {}\".format(len(good_tests)))\n",
    "        print(\"* Bad tests quantile = {}\".format(len(bad_tests)))\n",
    "    else:\n",
    "        bad_tests = frame[frame['mutation'] <= median]\n",
    "        good_tests = frame[frame['mutation'] > median]\n",
    "        bad_tests.to_csv(os.path.join(DATA_DIR, '{}_median.csv'.format(name_good)), index=False)\n",
    "        good_tests.to_csv(os.path.join(DATA_DIR, '{}_median.csv'.format(name_bad)), index=False)\n",
    "        print(\"* Good tests median = {}\".format(len(good_tests)))\n",
    "        print(\"* Bad tests median = {}\".format(len(bad_tests)))\n",
    "        \n",
    "separate_sets(complete_frame='merged_frame.csv', delimiter='quartile',\n",
    "                  name_good='good_tests_merged', name_bad='bad_tests_merged')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Importing data')\n",
    "data_x, data_y, features, number_of_features = load_data(effective_non_effective = True, coverage = False,\n",
    "                                                         grano_test = True, grano_production = True,\n",
    "                                                         my_test = False, my_production = False, scale = True)\n",
    "\n",
    "print(len(data_x))\n",
    "print('Import: DONE')\n",
    "\n",
    "\n",
    "model = keras.Sequential()\n",
    "model.add(keras.layers.Dropout(0.1, input_shape=(number_of_features,)))\n",
    "model.add(keras.layers.Dense(100, activation='relu'))\n",
    "model.add(keras.layers.Dense(20, activation='relu'))\n",
    "model.add(keras.layers.Dense(2, activation='softmax'))\n",
    "\n",
    "model.compile(optimizer='adam',\n",
    "              loss='sparse_categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "\n",
    "early_stopping_monitor = keras.callbacks.EarlyStopping(\n",
    "    monitor='accuracy', min_delta=0.0003, patience=10,\n",
    "    verbose=0, mode='max', restore_best_weights=True)\n",
    "    \n",
    "    \n",
    "# compile the keras model\n",
    "#model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "# fit the keras model on the dataset\n",
    "history = model.fit(data_x, data_y, epochs=150, batch_size=2000, verbose=1,validation_split=0.33, callbacks=[early_stopping_monitor])\n",
    "\n",
    "\n",
    "# list all data in history\n",
    "print(history.history.keys())\n",
    "# summarize history for accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()\n",
    "# summarize history for loss\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = load_frame(drop_project=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "projects = set(f.project)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gpg = set(['RxJava','cat','checkstyle','closure-compiler','commons-beanutils','commons-collections',\n",
    "       'commons-io','commons-lang','commons-math','fastjson','gson','guice','javapoet','jfreechart','joda-beans',\n",
    "       'jsoup','junit4','opengrok'])\n",
    "\n",
    "projects = projects.difference(gpg)\n",
    "\n",
    "\n",
    "all_pairs = []\n",
    "all_mutation = []\n",
    "all_LOC_prod = []\n",
    "all_LOC_test = []\n",
    "all_LOC_ratio = []\n",
    "all_mutation_ratio = []\n",
    "\n",
    "full = [all_pairs, all_LOC_prod, all_LOC_test, all_LOC_ratio, all_mutation, all_mutation_ratio]\n",
    "    \n",
    "index = 1\n",
    "for project_name in projects:\n",
    "    project_df = f[f['project'] == project_name]\n",
    "    \n",
    "    pairs = len(project_df.index)\n",
    "    all_pairs.append(pairs)\n",
    "    \n",
    "    mutation = project_df.no_mutations.sum()\n",
    "    all_mutation.append(mutation)\n",
    "    \n",
    "    LOC_prod = project_df.LOC_prod.sum()\n",
    "    all_LOC_prod.append(LOC_prod)\n",
    "    \n",
    "    LOC_test = project_df.LOC_test.sum()\n",
    "    all_LOC_test.append(LOC_test)\n",
    "    \n",
    "    LOC_ratio = round(float(LOC_test) / LOC_prod, 3)\n",
    "    all_LOC_ratio.append(LOC_ratio)\n",
    "    \n",
    "    mutation_ratio = round(float(mutation)/LOC_prod, 3)\n",
    "    all_mutation_ratio.append(mutation_ratio)\n",
    "    \n",
    "    print(\"{index}  & {project_name} & {pairs:,} & {LOC_prod:,} & {LOC_test:,}  & {LOC_ratio:.0%} & {mutation:,} & {mutation_ratio:.0%} ⏎\"\n",
    "         .format(index=index, project_name=project_name, pairs=pairs, LOC_prod=LOC_prod,\n",
    "                 LOC_test=LOC_test, LOC_ratio=LOC_ratio, mutation=mutation, mutation_ratio=mutation_ratio))\n",
    "    index+=1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statistics\n",
    "\n",
    "for lst in full:\n",
    "    print(statistics.median(lst))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Direct Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "seesion 0\n",
      "Importing data\n",
      "3793\n",
      "128\n",
      "Import: DONE\n",
      "mae: 0.24671061337\n",
      "Overfit mae: 0.0855833590031\n",
      "mae: 0.146829843521\n",
      "Overfit mae: 0.0943895801902\n",
      "mae: 0.161648526788\n",
      "Overfit mae: 0.0854185372591\n",
      "mae: 0.163666516542\n",
      "Overfit mae: 0.0864723473787\n",
      "mae: 0.158702224493\n",
      "Overfit mae: 0.0859044864774\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0mTraceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-59fb9998889c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     41\u001b[0m                       metrics=['mae'])\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m         \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_x\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_y\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/keras/engine/training.pyc\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)\u001b[0m\n\u001b[1;32m    817\u001b[0m         \u001b[0mmax_queue_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_queue_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    818\u001b[0m         \u001b[0mworkers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mworkers\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 819\u001b[0;31m         use_multiprocessing=use_multiprocessing)\n\u001b[0m\u001b[1;32m    820\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m   def evaluate(self,\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/keras/engine/training_v2.pyc\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, model, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)\u001b[0m\n\u001b[1;32m    340\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mModeKeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTRAIN\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m                 \u001b[0mtraining_context\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtraining_context\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m                 total_epochs=epochs)\n\u001b[0m\u001b[1;32m    343\u001b[0m             \u001b[0mcbks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_logs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch_logs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraining_result\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mModeKeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTRAIN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/keras/engine/training_v2.pyc\u001b[0m in \u001b[0;36mrun_one_epoch\u001b[0;34m(model, iterator, execution_function, dataset_size, batch_size, strategy, steps_per_epoch, num_samples, mode, training_context, total_epochs)\u001b[0m\n\u001b[1;32m    126\u001b[0m         step=step, mode=mode, size=current_batch_size) as batch_logs:\n\u001b[1;32m    127\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 128\u001b[0;31m         \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexecution_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    129\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mStopIteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOutOfRangeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;31m# TODO(kaftan): File bug about tf function and errors.OutOfRangeError?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/keras/engine/training_v2_utils.pyc\u001b[0m in \u001b[0;36mexecution_function\u001b[0;34m(input_fn)\u001b[0m\n\u001b[1;32m     96\u001b[0m     \u001b[0;31m# `numpy` translates Tensors to values in Eager mode.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m     return nest.map_structure(_non_none_constant_value,\n\u001b[0;32m---> 98\u001b[0;31m                               distributed_function(input_fn))\n\u001b[0m\u001b[1;32m     99\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mexecution_function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/eager/def_function.pyc\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    566\u001b[0m         \u001b[0mxla_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mExit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    567\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 568\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    569\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    570\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mtracing_count\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/eager/def_function.pyc\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    597\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    598\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 599\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    600\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    601\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/eager/function.pyc\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2360\u001b[0m     \u001b[0;34m\"\"\"Calls a graph function specialized to the inputs.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2361\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2362\u001b[0;31m       \u001b[0mgraph_function\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_define_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2363\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_filtered_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/eager/function.pyc\u001b[0m in \u001b[0;36m_maybe_define_function\u001b[0;34m(self, args, kwargs)\u001b[0m\n\u001b[1;32m   2659\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput_signature\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0margs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mNone\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2660\u001b[0m       args, kwargs = self._function_spec.canonicalize_function_inputs(\n\u001b[0;32m-> 2661\u001b[0;31m           *args, **kwargs)\n\u001b[0m\u001b[1;32m   2662\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2663\u001b[0m     \u001b[0mcache_key\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cache_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/eager/function.pyc\u001b[0m in \u001b[0;36mcanonicalize_function_inputs\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2141\u001b[0m               \"covered by it. Received argument %s.\" % arg)\n\u001b[1;32m   2142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2143\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2144\u001b[0m       \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2145\u001b[0m       \u001b[0mdefault_keys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_arg_indices_to_default_values\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "final_mae = []\n",
    "final_pearson = []\n",
    "\n",
    "for i in range(0,10):\n",
    "    print('seesion {}'.format(i))\n",
    "    print('Importing data')\n",
    "    data_x, data_y, features, number_of_features = load_data(effective_non_effective = False, coverage = False,\n",
    "                                                             grano_test = True, grano_production = True,\n",
    "                                                             my_test = True , my_production = True, scale = True)\n",
    "\n",
    "    data_y = data_y.values\n",
    "\n",
    "\n",
    "    print(len(data_x))\n",
    "    print(number_of_features)\n",
    "    print('Import: DONE')\n",
    "\n",
    "\n",
    "    #seed = 7\n",
    "    #np.random.seed(seed)\n",
    "    kfold = KFold(n_splits=10, shuffle=True) #, random_state=seed)\n",
    "    cvscores = []\n",
    "    overscores = []\n",
    "    \n",
    "    predicted_all_1 = []\n",
    "    actual_all_1 = []\n",
    "\n",
    "    for train, test in kfold.split(data_x, data_y):\n",
    "\n",
    "        #x_validation, x_test, y_validation, y_test = train_test_split(data_x[validation_and_test], data_y[validation_and_test], test_size=.5, random_state=seed)\n",
    "\n",
    "\n",
    "        model = keras.Sequential()\n",
    "        model.add(keras.layers.Dense(number_of_features, activation='relu', input_dim=number_of_features))\n",
    "        model.add(keras.layers.Dense(40, activation='relu', kernel_regularizer= keras.regularizers.l2(0.01)))\n",
    "        model.add(keras.layers.Dense(20, activation='relu', kernel_regularizer= keras.regularizers.l2(0.01)))\n",
    "        model.add(keras.layers.Dense(1))\n",
    "\n",
    "        model.compile(optimizer='adam',\n",
    "                      loss='mean_squared_error',\n",
    "                      metrics=['mae'])\n",
    "\n",
    "        history = model.fit(data_x[train], data_y[train], epochs=50, verbose=0)\n",
    "        \n",
    "        \n",
    "        predicted = model.predict(data_x[test])\n",
    "        actual = data_y[test]\n",
    "        predicted_all_1.append(predicted)\n",
    "        actual_all_1.append(actual)\n",
    "        #plt.scatter(actual, predicted, c = 'r');\n",
    "        #plt.show()\n",
    "\n",
    "\n",
    "        scores = model.evaluate(data_x[test], data_y[test], verbose=0)\n",
    "        overfit = model.evaluate(data_x[train], data_y[train], verbose=0)\n",
    "        print('{}: {}'.format(model.metrics_names[1], scores[1]))\n",
    "        print('Overfit {}: {}'.format(model.metrics_names[1], overfit[1]))\n",
    "        #print(\"-------------------------------------------\")\n",
    "\n",
    "        cvscores.append(scores[1])\n",
    "        overscores.append(overfit[1])\n",
    "\n",
    "    print(\"-------------------------------------------\")\n",
    "    print(\"Final results\")\n",
    "    print('{} (+/- {})'.format(np.mean(cvscores), np.std(cvscores)))\n",
    "    print('And overfit of {} (+/- {})'.format(np.mean(overscores), np.std(overscores)))\n",
    "    print(\"-------------------------------------------\")\n",
    "    final_mae.append(np.mean(cvscores))\n",
    "    \n",
    "    actual_flat = [item[0] for sublist in actual_all_1 for item in sublist]\n",
    "    predicted_flat = [item[0] for sublist in predicted_all_1 for item in sublist]\n",
    "    predicted_flat = [max(min(item,1),0) for item in predicted_flat]\n",
    "    \n",
    "    import scipy.stats\n",
    "    pearson = scipy.stats.pearsonr(actual_flat, predicted_flat)\n",
    "    print('pearson: {}'.format(pearson))\n",
    "    final_pearson.append(pearson[0])\n",
    "\n",
    "print('------------------------------')\n",
    "print(final_mae)\n",
    "print(final_pearson)\n",
    "print(np.mean(final_mae))\n",
    "print(np.std(final_mae))\n",
    "print(np.mean(final_pearson))\n",
    "print(np.std(final_pearson))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(0.7433194491029562, 9.229759133384128e-201)"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "actual_flat = [item[0] for sublist in actual_all_1 for item in sublist]\n",
    "predicted_flat = [item[0] for sublist in predicted_all_1 for item in sublist]\n",
    "predicted_flat = [max(min(item,1),0) for item in predicted_flat]\n",
    "\n",
    "\n",
    "fig = plt.figure()\n",
    "\n",
    "ax = fig.add_subplot(111)\n",
    "fig.subplots_adjust(top=0.85)\n",
    "\n",
    "ax.set_xlabel('Predicted Mutation Score')\n",
    "ax.set_ylabel('Actual Mutation Score')\n",
    "\n",
    "plt.scatter(predicted_flat, actual_flat, c = 'b', s = 0.1);\n",
    "plt.savefig('dynamic.pdf')\n",
    "plt.show()\n",
    "\n",
    "import scipy.stats\n",
    "scipy.stats.pearsonr(actual_flat, predicted_flat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-110-3363821faf95>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-110-3363821faf95>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    Full, Dynamic:\u001b[0m\n\u001b[0m                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Full, Dynamic:\n",
    "\n",
    "0.108381554\n",
    "0.0055808485\n",
    "\n",
    "5.14926045441275\n",
    "\n",
    "\n",
    "Full, Static:\n",
    "    \n",
    "0.15505183\n",
    "0.0035718314\n",
    "\n",
    "2.303637048334096\n",
    "\n",
    "\n",
    "Light, static:\n",
    "\n",
    "0.16509138\n",
    "0.0007640535\n",
    "\n",
    "0.46280641666451633\n",
    "\n",
    "\n",
    "Lighter, static:\n",
    "\n",
    "0.16052684\n",
    "0.0037234426\n",
    "\n",
    "2.3195140451279053\n",
    "\n",
    "\n",
    "Test, static:\n",
    "\n",
    "0.18919036\n",
    "0.0015139029\n",
    "\n",
    "0.8002008664712092\n",
    "\n",
    "Production, Static:\n",
    "    \n",
    "0.18833965\n",
    "0.0021931734\n",
    "\n",
    "1.1644777931784411\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "seesion 0\n",
      "Importing data\n",
      "3793\n",
      "142\n",
      "Import: DONE\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 0.156008034945\n",
      "Overfit mae: 0.0809727013111\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 0.148063153028\n",
      "Overfit mae: 0.0826200172305\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 0.160358980298\n",
      "Overfit mae: 0.090053781867\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 0.15301707387\n",
      "Overfit mae: 0.0902444273233\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 0.158251941204\n",
      "Overfit mae: 0.0916546955705\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 0.160568013787\n",
      "Overfit mae: 0.0766697302461\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 0.142876148224\n",
      "Overfit mae: 0.0885425508022\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 0.152923852205\n",
      "Overfit mae: 0.0938938632607\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 0.145453557372\n",
      "Overfit mae: 0.0933503955603\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 0.16456001997\n",
      "Overfit mae: 0.0896901190281\n",
      "-------------------------------------------\n",
      "Final results\n",
      "0.154208093882 (+/- 0.00671505695209)\n",
      "And overfit of 0.0877692252398 (+/- 0.00543412473053)\n",
      "-------------------------------------------\n",
      "------------------------------\n",
      "0.1542081\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "final_mae = []\n",
    "for i in range(0,1):\n",
    "    print('seesion {}'.format(i))\n",
    "    print('Importing data')\n",
    "    data_x, data_y, features, number_of_features = load_data(effective_non_effective = False, coverage = False,\n",
    "                                                             grano_test = True, grano_production = True,\n",
    "                                                             my_test = True , my_production = True, scale = True)\n",
    "\n",
    "    data_y = data_y.values\n",
    "\n",
    "\n",
    "    print(len(data_x))\n",
    "    print(number_of_features)\n",
    "    print('Import: DONE')\n",
    "\n",
    "\n",
    "    #seed = 7\n",
    "    #np.random.seed(seed)\n",
    "    kfold = KFold(n_splits=10, shuffle=True) #, random_state=seed)\n",
    "    cvscores = []\n",
    "    overscores = []\n",
    "    \n",
    "    predicted_all = []\n",
    "    actual_all = []\n",
    "\n",
    "    for train, test in kfold.split(data_x, data_y):\n",
    "\n",
    "        #x_validation, x_test, y_validation, y_test = train_test_split(data_x[validation_and_test], data_y[validation_and_test], test_size=.5, random_state=seed)\n",
    "\n",
    "\n",
    "        model = keras.Sequential()\n",
    "        model.add(keras.layers.Dense(number_of_features, activation='relu', input_dim=number_of_features))\n",
    "        model.add(keras.layers.Dense(40, activation='relu', kernel_regularizer= keras.regularizers.l2(0.01)))\n",
    "        model.add(keras.layers.Dense(20, activation='relu', kernel_regularizer= keras.regularizers.l2(0.01)))\n",
    "        model.add(keras.layers.Dense(1))\n",
    "\n",
    "        model.compile(optimizer='adam',\n",
    "                      loss='mean_squared_error',\n",
    "                      metrics=['mae'])\n",
    "\n",
    "        history = model.fit(data_x[train], data_y[train], epochs=50, verbose=0)\n",
    "        \n",
    "        \n",
    "        predicted = model.predict(data_x[test])\n",
    "        actual = data_y[test]\n",
    "        predicted_all.append(predicted)\n",
    "        actual_all.append(actual)\n",
    "        plt.scatter(actual, predicted, c = 'r');\n",
    "        plt.show()\n",
    "\n",
    "\n",
    "        scores = model.evaluate(data_x[test], data_y[test], verbose=0)\n",
    "        overfit = model.evaluate(data_x[train], data_y[train], verbose=0)\n",
    "        print('{}: {}'.format(model.metrics_names[1], scores[1]))\n",
    "        print('Overfit {}: {}'.format(model.metrics_names[1], overfit[1]))\n",
    "        #print(\"-------------------------------------------\")\n",
    "\n",
    "        cvscores.append(scores[1])\n",
    "        overscores.append(overfit[1])\n",
    "\n",
    "    print(\"-------------------------------------------\")\n",
    "    print(\"Final results\")\n",
    "    print('{} (+/- {})'.format(np.mean(cvscores), np.std(cvscores)))\n",
    "    print('And overfit of {} (+/- {})'.format(np.mean(overscores), np.std(overscores)))\n",
    "    print(\"-------------------------------------------\")\n",
    "    final_mae.append(np.mean(cvscores))\n",
    "print('------------------------------')\n",
    "print(np.mean(final_mae))\n",
    "print(np.std(final_mae))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(0.6883782272268079, 0.0)"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "actual_flat = [item[0] for sublist in actual_all for item in sublist]\n",
    "predicted_flat = [item[0] for sublist in predicted_all for item in sublist]\n",
    "predicted_flat = [max(min(item,1),0) for item in predicted_flat]\n",
    "\n",
    "\n",
    "fig = plt.figure()\n",
    "\n",
    "ax = fig.add_subplot(111)\n",
    "fig.subplots_adjust(top=0.85)\n",
    "\n",
    "ax.set_xlabel('Predicted Mutation Score')\n",
    "ax.set_ylabel('Actual Mutation Score')\n",
    "\n",
    "plt.scatter(predicted_flat, actual_flat, c = 'b', s = 0.1);\n",
    "plt.savefig('static.pdf')\n",
    "plt.show()\n",
    "\n",
    "import scipy.stats\n",
    "scipy.stats.pearsonr(actual_flat, predicted_flat)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    project  mutation  no_mutations  line_coverage  \\\n",
      "0                jfreechart  0.394366            71       0.600000   \n",
      "1       commons-collections  0.833333            12       0.833333   \n",
      "2                checkstyle  0.477528           178       1.000000   \n",
      "3              commons-math  0.727679           224       0.775862   \n",
      "4                     jsoup  0.707608          1091       0.829016   \n",
      "5              commons-math  0.361582           177       0.775000   \n",
      "6                jfreechart  0.360111           361       0.520468   \n",
      "7               commons-net  0.557457           409       0.728814   \n",
      "8                jfreechart  0.464286            28       0.550000   \n",
      "9                     jsoup  0.550107           469       0.752381   \n",
      "10         closure-compiler  0.521008           714       0.715867   \n",
      "11      spring-data-commons  0.823529           102       0.923077   \n",
      "12      spring-data-commons  0.100000            40       0.142857   \n",
      "13                   RxJava  0.909091            11       1.000000   \n",
      "14                    truth  0.952381           105       0.954545   \n",
      "15    commons-configuration  0.626374            91       0.819444   \n",
      "16                 undertow  0.485898          2482       0.643735   \n",
      "17               jfreechart  0.468354            79       0.738095   \n",
      "18             commons-math  0.661130           903       0.917333   \n",
      "19      commons-collections  0.644444            45       0.937500   \n",
      "20          commons-imaging  0.291667            24       0.833333   \n",
      "21         closure-compiler  0.209647           539       0.433862   \n",
      "22             commons-lang  0.970588           102       1.000000   \n",
      "23                   RxJava  0.666667             6       1.000000   \n",
      "24                   RxJava  0.500000             2       0.600000   \n",
      "25                    zxing  1.000000             1       1.000000   \n",
      "26      spring-data-commons  0.666667            63       0.928571   \n",
      "27                 javapoet  0.788690           336       0.870968   \n",
      "28          commons-imaging  0.285714             7       0.368421   \n",
      "29                     gson  0.741837          1960       0.950301   \n",
      "...                     ...       ...           ...            ...   \n",
      "3765       closure-compiler  0.740741           216       0.975000   \n",
      "3766    commons-collections  0.500000             4       0.666667   \n",
      "3767                 RxJava  1.000000             3       1.000000   \n",
      "3768             jfreechart  0.179487           117       0.316667   \n",
      "3769                 RxJava  1.000000             4       1.000000   \n",
      "3770                 RxJava  1.000000             6       1.000000   \n",
      "3771  commons-configuration  1.000000            13       1.000000   \n",
      "3772       closure-compiler  0.935484            31       1.000000   \n",
      "3773               opengrok  0.589595           173       0.681818   \n",
      "3774              spring-ws  0.725490           102       0.937500   \n",
      "3775               opengrok  0.371996           957       0.363799   \n",
      "3776       closure-compiler  0.500000            50       0.954545   \n",
      "3777    spring-data-commons  0.342629           251       0.805556   \n",
      "3778              spring-ws  0.814286           140       0.977273   \n",
      "3779             checkstyle  0.500000            62       1.000000   \n",
      "3780      commons-beanutils  0.672131            61       0.800000   \n",
      "3781        joda-primitives  0.650485           103       0.666667   \n",
      "3782       jackson-databind  0.641026            78       0.793814   \n",
      "3783             checkstyle  0.454545            22       1.000000   \n",
      "3784              spring-ws  0.236515           241       0.344828   \n",
      "3785           commons-lang  0.600386          5698       0.704009   \n",
      "3786      commons-beanutils  0.403846            52       0.585366   \n",
      "3787                 RxJava  0.923077            13       1.000000   \n",
      "3788       closure-compiler  0.797495           479       0.948980   \n",
      "3789       closure-compiler  0.792317           833       0.988201   \n",
      "3790    spring-data-commons  0.875000            48       0.909091   \n",
      "3791             checkstyle  0.469388            49       1.000000   \n",
      "3792                 RxJava  0.923077            13       1.000000   \n",
      "3793           orson-charts  0.328829           222       0.391304   \n",
      "3794            commons-cli  0.916129           155       0.984456   \n",
      "\n",
      "      AssertionRoulette  EagerTest  LazyTest  MysteryGuest  SensitiveEquality  \\\n",
      "0                     1          1         0             0                  0   \n",
      "1                     1          1         0             0                  0   \n",
      "2                     0          1         0             0                  0   \n",
      "3                     1          1         0             0                  0   \n",
      "4                     1          1         0             0                  1   \n",
      "5                     1          0         0             0                  0   \n",
      "6                     1          1         0             0                  0   \n",
      "7                     1          0         0             0                  0   \n",
      "8                     1          1         0             0                  0   \n",
      "9                     1          1         0             0                  1   \n",
      "10                    1          1         0             0                  0   \n",
      "11                    1          1         0             0                  1   \n",
      "12                    1          1         0             0                  0   \n",
      "13                    1          0         0             0                  0   \n",
      "14                    1          0         0             0                  0   \n",
      "15                    1          1         0             1                  0   \n",
      "16                    1          1         0             0                  1   \n",
      "17                    1          0         0             0                  0   \n",
      "18                    1          0         0             0                  0   \n",
      "19                    0          0         0             0                  0   \n",
      "20                    1          1         0             0                  1   \n",
      "21                    0          0         0             0                  1   \n",
      "22                    1          1         0             0                  1   \n",
      "23                    0          0         0             0                  0   \n",
      "24                    1          0         0             0                  1   \n",
      "25                    1          0         0             0                  0   \n",
      "26                    1          0         0             0                  1   \n",
      "27                    1          1         0             0                  1   \n",
      "28                    1          0         0             0                  0   \n",
      "29                    1          1         0             0                  0   \n",
      "...                 ...        ...       ...           ...                ...   \n",
      "3765                  0          0         0             0                  0   \n",
      "3766                  1          0         0             0                  0   \n",
      "3767                  1          0         0             0                  0   \n",
      "3768                  1          1         0             0                  0   \n",
      "3769                  1          0         0             0                  0   \n",
      "3770                  1          0         0             0                  0   \n",
      "3771                  0          1         0             0                  0   \n",
      "3772                  0          1         0             0                  0   \n",
      "3773                  1          0         0             0                  0   \n",
      "3774                  1          0         0             0                  0   \n",
      "3775                  1          1         0             1                  1   \n",
      "3776                  0          0         0             0                  0   \n",
      "3777                  1          0         0             0                  1   \n",
      "3778                  0          1         0             0                  0   \n",
      "3779                  0          1         0             0                  0   \n",
      "3780                  1          0         0             0                  0   \n",
      "3781                  1          1         0             0                  0   \n",
      "3782                  1          1         0             0                  0   \n",
      "3783                  0          0         0             0                  0   \n",
      "3784                  0          1         0             0                  1   \n",
      "3785                  1          1         0             0                  1   \n",
      "3786                  1          0         0             0                  0   \n",
      "3787                  1          1         0             0                  0   \n",
      "3788                  1          0         0             0                  0   \n",
      "3789                  0          0         0             0                  0   \n",
      "3790                  1          0         0             0                  1   \n",
      "3791                  0          1         0             0                  0   \n",
      "3792                  1          0         0             0                  0   \n",
      "3793                  1          1         0             0                  0   \n",
      "3794                  0          0         0             0                  0   \n",
      "\n",
      "      ResourceOptimism  ...  No. Try_production  No. Catch_production  \\\n",
      "0                    0  ...                   0                     0   \n",
      "1                    0  ...                   0                     0   \n",
      "2                    0  ...                   0                     0   \n",
      "3                    0  ...                   0                     0   \n",
      "4                    0  ...                   3                     3   \n",
      "5                    0  ...                   0                     0   \n",
      "6                    0  ...                   0                     0   \n",
      "7                    0  ...                   2                     2   \n",
      "8                    0  ...                   0                     0   \n",
      "9                    0  ...                   3                     3   \n",
      "10                   0  ...                   0                     0   \n",
      "11                   0  ...                   0                     0   \n",
      "12                   0  ...                   0                     0   \n",
      "13                   0  ...                   4                     4   \n",
      "14                   0  ...                   0                     0   \n",
      "15                   1  ...                   3                     2   \n",
      "16                   0  ...                   1                     1   \n",
      "17                   0  ...                   0                     0   \n",
      "18                   0  ...                   0                     0   \n",
      "19                   0  ...                   0                     0   \n",
      "20                   0  ...                   0                     0   \n",
      "21                   0  ...                   0                     0   \n",
      "22                   0  ...                   0                     0   \n",
      "23                   0  ...                   0                     0   \n",
      "24                   0  ...                   0                     0   \n",
      "25                   0  ...                   0                     0   \n",
      "26                   0  ...                   2                     2   \n",
      "27                   0  ...                   0                     0   \n",
      "28                   0  ...                   0                     0   \n",
      "29                   0  ...                   2                     2   \n",
      "...                ...  ...                 ...                   ...   \n",
      "3765                 0  ...                   0                     0   \n",
      "3766                 0  ...                   0                     0   \n",
      "3767                 0  ...                   0                     0   \n",
      "3768                 0  ...                   0                     0   \n",
      "3769                 0  ...                   1                     1   \n",
      "3770                 0  ...                   1                     1   \n",
      "3771                 0  ...                   0                     0   \n",
      "3772                 0  ...                   0                     0   \n",
      "3773                 0  ...                   3                     1   \n",
      "3774                 0  ...                   0                     0   \n",
      "3775                 1  ...                  26                    14   \n",
      "3776                 0  ...                   0                     0   \n",
      "3777                 0  ...                   0                     0   \n",
      "3778                 0  ...                   0                     0   \n",
      "3779                 0  ...                   0                     0   \n",
      "3780                 0  ...                   2                     2   \n",
      "3781                 0  ...                   0                     0   \n",
      "3782                 0  ...                   0                     0   \n",
      "3783                 0  ...                   0                     0   \n",
      "3784                 0  ...                   1                     1   \n",
      "3785                 0  ...                   0                     0   \n",
      "3786                 0  ...                   1                     4   \n",
      "3787                 0  ...                   0                     0   \n",
      "3788                 0  ...                   0                     0   \n",
      "3789                 0  ...                   0                     0   \n",
      "3790                 0  ...                   0                     0   \n",
      "3791                 0  ...                   0                     0   \n",
      "3792                 0  ...                   0                     0   \n",
      "3793                 0  ...                   0                     0   \n",
      "3794                 0  ...                   1                     1   \n",
      "\n",
      "      No. Loop_production  No. Break_production  No. Continue_production  \\\n",
      "0                       0                     0                        0   \n",
      "1                       0                     0                        0   \n",
      "2                       1                     0                        0   \n",
      "3                      13                     0                        0   \n",
      "4                      11                     0                        0   \n",
      "5                       0                     0                        0   \n",
      "6                       9                     0                        0   \n",
      "7                       0                     0                        0   \n",
      "8                       0                     0                        0   \n",
      "9                      10                     0                        0   \n",
      "10                      1                     6                        0   \n",
      "11                      0                     0                        0   \n",
      "12                      0                     0                        0   \n",
      "13                     10                     8                        0   \n",
      "14                      0                     0                        0   \n",
      "15                      6                     0                        0   \n",
      "16                     16                    11                        0   \n",
      "17                      0                     0                        0   \n",
      "18                     52                     0                        0   \n",
      "19                      0                     0                        0   \n",
      "20                      0                     0                        0   \n",
      "21                      8                     1                        0   \n",
      "22                      0                     0                        0   \n",
      "23                      0                     0                        0   \n",
      "24                      0                     0                        0   \n",
      "25                      0                     0                        0   \n",
      "26                      0                     0                        0   \n",
      "27                      6                     0                        1   \n",
      "28                      0                     0                        0   \n",
      "29                     16                    15                       12   \n",
      "...                   ...                   ...                      ...   \n",
      "3765                    1                     0                        0   \n",
      "3766                    0                     0                        0   \n",
      "3767                    0                     0                        0   \n",
      "3768                    1                     0                        0   \n",
      "3769                    1                     0                        0   \n",
      "3770                    6                     2                        0   \n",
      "3771                    2                     0                        0   \n",
      "3772                    0                     0                        0   \n",
      "3773                    2                     0                        0   \n",
      "3774                    0                     0                        0   \n",
      "3775                    8                     0                        1   \n",
      "3776                    1                     0                        0   \n",
      "3777                    1                     0                        0   \n",
      "3778                    2                     0                        0   \n",
      "3779                    0                     0                        0   \n",
      "3780                    2                     0                        0   \n",
      "3781                    0                     0                        0   \n",
      "3782                    1                     1                        0   \n",
      "3783                    0                     0                        0   \n",
      "3784                    1                     0                        0   \n",
      "3785                  106                     8                       13   \n",
      "3786                    0                     0                        0   \n",
      "3787                    0                     0                        0   \n",
      "3788                    7                     0                        1   \n",
      "3789                   15                     5                        5   \n",
      "3790                    0                     0                        0   \n",
      "3791                    0                     0                        0   \n",
      "3792                    0                     0                        0   \n",
      "3793                    0                     0                        0   \n",
      "3794                    5                     3                        1   \n",
      "\n",
      "      No. Conditions_production  No. Else_production  No. &&_production  \\\n",
      "0                             4                    0                  1   \n",
      "1                             0                    0                  0   \n",
      "2                             3                    0                  2   \n",
      "3                            11                    0                  0   \n",
      "4                            61                   18                 21   \n",
      "5                             9                    4                  3   \n",
      "6                            22                    3                  0   \n",
      "7                            15                    5                  2   \n",
      "8                             2                    0                  0   \n",
      "9                            20                    6                  1   \n",
      "10                           56                   15                 17   \n",
      "11                            0                    0                  0   \n",
      "12                            0                    0                  0   \n",
      "13                           67                   16                  4   \n",
      "14                            7                    4                  0   \n",
      "15                           24                   11                  4   \n",
      "16                          106                   58                  6   \n",
      "17                            7                    0                  0   \n",
      "18                           34                    6                  9   \n",
      "19                            3                    0                  1   \n",
      "20                            5                    0                  0   \n",
      "21                           40                   11                  8   \n",
      "22                            1                    0                  0   \n",
      "23                            0                    0                  0   \n",
      "24                            0                    0                  0   \n",
      "25                            0                    0                  0   \n",
      "26                            8                    0                  0   \n",
      "27                            8                    3                  3   \n",
      "28                            2                    0                  1   \n",
      "29                          143                   68                 25   \n",
      "...                         ...                  ...                ...   \n",
      "3765                         21                    3                 10   \n",
      "3766                          0                    0                  0   \n",
      "3767                          1                    0                  0   \n",
      "3768                          7                    0                  0   \n",
      "3769                          7                    1                  0   \n",
      "3770                         23                    3                  1   \n",
      "3771                          3                    0                  0   \n",
      "3772                          1                    0                  1   \n",
      "3773                          8                    3                  0   \n",
      "3774                          4                    3                  0   \n",
      "3775                         27                    5                  3   \n",
      "3776                          4                    0                  1   \n",
      "3777                         12                    1                  0   \n",
      "3778                          7                    0                  2   \n",
      "3779                          1                    0                  0   \n",
      "3780                          6                    3                  0   \n",
      "3781                          3                    0                  0   \n",
      "3782                         25                    1                  3   \n",
      "3783                          0                    0                  0   \n",
      "3784                          6                    1                  3   \n",
      "3785                        461                   45                 43   \n",
      "3786                          6                    2                  1   \n",
      "3787                          0                    0                  0   \n",
      "3788                         35                    6                  5   \n",
      "3789                         63                    6                 23   \n",
      "3790                          3                    1                  0   \n",
      "3791                          3                    0                  0   \n",
      "3792                          4                    2                  0   \n",
      "3793                         10                    1                  1   \n",
      "3794                         45                   25                 18   \n",
      "\n",
      "      No. ||_production  No. Ternary_production  \n",
      "0                     0                       0  \n",
      "1                     0                       0  \n",
      "2                     2                       0  \n",
      "3                     0                       2  \n",
      "4                     8                       4  \n",
      "5                     0                       0  \n",
      "6                     2                       4  \n",
      "7                     4                       0  \n",
      "8                     0                       0  \n",
      "9                     2                       6  \n",
      "10                    6                       5  \n",
      "11                    1                       4  \n",
      "12                    0                       0  \n",
      "13                    0                       0  \n",
      "14                    0                       0  \n",
      "15                   67                       1  \n",
      "16                   13                       0  \n",
      "17                    0                       0  \n",
      "18                    6                       4  \n",
      "19                    0                       1  \n",
      "20                    1                       0  \n",
      "21                    4                       6  \n",
      "22                    0                       0  \n",
      "23                    0                       0  \n",
      "24                    0                       0  \n",
      "25                    0                       0  \n",
      "26                    0                       0  \n",
      "27                    2                       8  \n",
      "28                    0                       0  \n",
      "29                   33                       5  \n",
      "...                 ...                     ...  \n",
      "3765                  5                       0  \n",
      "3766                  0                       0  \n",
      "3767                  0                       0  \n",
      "3768                  2                       1  \n",
      "3769                  0                       0  \n",
      "3770                  0                       0  \n",
      "3771                  0                       0  \n",
      "3772                  0                       0  \n",
      "3773                  0                       0  \n",
      "3774                  1                       0  \n",
      "3775                  1                       7  \n",
      "3776                  0                       0  \n",
      "3777                  2                       2  \n",
      "3778                  0                       0  \n",
      "3779                  0                       0  \n",
      "3780                  0                       0  \n",
      "3781                  0                       0  \n",
      "3782                  4                       3  \n",
      "3783                  0                       0  \n",
      "3784                  0                       0  \n",
      "3785                131                      30  \n",
      "3786                  0                       0  \n",
      "3787                  0                       0  \n",
      "3788                  9                       1  \n",
      "3789                 19                       2  \n",
      "3790                  0                       0  \n",
      "3791                  0                       0  \n",
      "3792                  0                       0  \n",
      "3793                  0                       0  \n",
      "3794                  7                       3  \n",
      "\n",
      "[3795 rows x 150 columns]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1895\n",
      "['LOC_test', 'NOA_test', 'NOPA_test', 'NOP_test', 'HALSTEAD_test', 'RFC_test', 'CBO_test', 'LCOM1_test', 'LCOM2_test', 'LCOM3_test', 'LCOM4_test', 'LCOM5_test', 'WCM_test', 'McCABE_test', 'test_readability', 'MPC_test', 'IFC_test', 'DAC_test', 'DAC2_test', 'CONNECTIVITY_test', 'COH_test', 'TCC_test', 'LCC_test', 'ICH_test', 'AssertionRoulette', 'EagerTest', 'LazyTest', 'MysteryGuest', 'SensitiveEquality', 'ResourceOptimism', 'ForTestersOnly', 'IndirectTesting', 'LOC_prod', 'NOA_prod', 'NOPA_prod', 'NOP_prod', 'HALSTEAD_prod', 'RFC_prod', 'CBO_prod', 'LCOM1_prod', 'LCOM2_prod', 'LCOM3_prod', 'LCOM4_prod', 'LCOM5_prod', 'WCM_prod', 'McCABE_prod', 'prod_readability', 'MPC_prod', 'IFC_prod', 'DAC_prod', 'DAC2_prod', 'CONNECTIVITY_prod', 'COH_prod', 'TCC_prod', 'LCC_prod', 'ICH_prod', 'csm_CDSBP', 'csm_CC', 'csm_FD', 'csm_Blob', 'csm_SC', 'csm_MC', 'csm_LM', 'csm_FE', 'Word', 'Special', 'Non Whithe Characters', 'Comments', 'No. Methods', 'Vocabulary', 'Strings', 'AST size', 'Deg^2', 'Deg^3', 'Deg', 'Deg^-1', 'Deg^-2', 'Max Depth', 'Avg Depth^(-2)', 'Avg Depth^(-1)', 'Avg Depth', 'Avg Depth^2', 'Avg Depth^3', 'Decendent', 'DegPerm', 'No. Method Invoctions', 'Dexterity', 'No. Expressions', 'Numeric Literals', 'No. Field Access', 'No. Primitives', 'No. &&', 'No. ||', 'No. Try', 'No. Catch', 'No. Loop', 'No. Break', 'No. Continue', 'No. Conditions', 'No. Else', 'No. Ternary', 'Bad API', 'Junit', 'Hamcrest', 'Mockito', 'Word_production', 'Special_production', 'Non Whithe Characters_production', 'Comments_production', 'No. Methods_production', 'Vocabulary_production', 'Strings_production', 'AST size_production', 'Deg^2_production', 'Deg^3_production', 'Deg_production', 'Deg^-1_production', 'Deg^-2_production', 'Max Depth_production', 'Avg Depth^(-2)_production', 'Avg Depth^(-1)_production', 'Avg Depth_production', 'Avg Depth^2_production', 'Avg Depth^3_production', 'Decendent_production', 'DegPerm_production', 'No. Method Invoctions_production', 'Dexterity_production', 'No. Expressions_production', 'Numeric Literals_production', 'No. Field Access_production', 'No. Primitives_production', 'No. &&_production', 'No. ||_production', 'No. Try_production', 'No. Catch_production', 'No. Loop_production', 'No. Break_production', 'No. Continue_production', 'No. Conditions_production', 'No. Else_production', 'No. Ternary_production']\n"
     ]
    }
   ],
   "source": [
    "from data_loader import load_data, load_frame\n",
    "\n",
    "data_x, data_y, features, number_of_features = load_data(effective_non_effective = True, coverage = False,\n",
    "                                                             grano_test = True, grano_production = True,\n",
    "                                                             my_test = True , my_production = True, scale = False)\n",
    "\n",
    "\n",
    "print(len(data_x))\n",
    "print(features)\n",
    "import pandas\n",
    "\n",
    "df = pandas.DataFrame(data=data_x, columns=features)\n",
    "df['mutation'] = data_y\n",
    "\n",
    "\n",
    "good_tests = df[df['mutation'] == 1]\n",
    "bad_tests = df[df['mutation'] == 0]\n",
    "\n",
    "good_tests.to_csv('good_tests_extended.csv')\n",
    "bad_tests.to_csv('bad_tests_extended.csv')\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LOC_test</th>\n",
       "      <th>NOA_test</th>\n",
       "      <th>NOPA_test</th>\n",
       "      <th>NOP_test</th>\n",
       "      <th>HALSTEAD_test</th>\n",
       "      <th>RFC_test</th>\n",
       "      <th>CBO_test</th>\n",
       "      <th>LCOM1_test</th>\n",
       "      <th>LCOM2_test</th>\n",
       "      <th>LCOM3_test</th>\n",
       "      <th>...</th>\n",
       "      <th>No. ||_production</th>\n",
       "      <th>No. Try_production</th>\n",
       "      <th>No. Catch_production</th>\n",
       "      <th>No. Loop_production</th>\n",
       "      <th>No. Break_production</th>\n",
       "      <th>No. Continue_production</th>\n",
       "      <th>No. Conditions_production</th>\n",
       "      <th>No. Else_production</th>\n",
       "      <th>No. Ternary_production</th>\n",
       "      <th>mutation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>217</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>861.437324</td>\n",
       "      <td>34</td>\n",
       "      <td>5</td>\n",
       "      <td>66</td>\n",
       "      <td>66</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>219</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>931.606009</td>\n",
       "      <td>101</td>\n",
       "      <td>21</td>\n",
       "      <td>150</td>\n",
       "      <td>90</td>\n",
       "      <td>60</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>188</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1018.168297</td>\n",
       "      <td>61</td>\n",
       "      <td>11</td>\n",
       "      <td>36</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>226</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1276.067267</td>\n",
       "      <td>56</td>\n",
       "      <td>7</td>\n",
       "      <td>250</td>\n",
       "      <td>247</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>256</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>729.481772</td>\n",
       "      <td>66</td>\n",
       "      <td>9</td>\n",
       "      <td>45</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>311</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>953.928267</td>\n",
       "      <td>130</td>\n",
       "      <td>30</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>253</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>66</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>158.200170</td>\n",
       "      <td>28</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>294</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1478.473523</td>\n",
       "      <td>106</td>\n",
       "      <td>11</td>\n",
       "      <td>114</td>\n",
       "      <td>108</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>57.244029</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>482</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2324.190870</td>\n",
       "      <td>197</td>\n",
       "      <td>16</td>\n",
       "      <td>630</td>\n",
       "      <td>630</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>196.712572</td>\n",
       "      <td>14</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>81.698585</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>177</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>395.122311</td>\n",
       "      <td>82</td>\n",
       "      <td>5</td>\n",
       "      <td>34</td>\n",
       "      <td>13</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>292</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1177.099392</td>\n",
       "      <td>161</td>\n",
       "      <td>7</td>\n",
       "      <td>777</td>\n",
       "      <td>774</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>261</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1379.399838</td>\n",
       "      <td>74</td>\n",
       "      <td>4</td>\n",
       "      <td>120</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>437</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1440.664017</td>\n",
       "      <td>110</td>\n",
       "      <td>6</td>\n",
       "      <td>135</td>\n",
       "      <td>99</td>\n",
       "      <td>36</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>396</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2184.740672</td>\n",
       "      <td>187</td>\n",
       "      <td>15</td>\n",
       "      <td>253</td>\n",
       "      <td>253</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>88.533107</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>110</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>255.033887</td>\n",
       "      <td>36</td>\n",
       "      <td>5</td>\n",
       "      <td>36</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>123.814032</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>56</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>250.463229</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>118</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>587.211779</td>\n",
       "      <td>36</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>66</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>311.091852</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>1217</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2532.778640</td>\n",
       "      <td>48</td>\n",
       "      <td>9</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>85</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>137</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>339.775205</td>\n",
       "      <td>73</td>\n",
       "      <td>6</td>\n",
       "      <td>136</td>\n",
       "      <td>136</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>133</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>279.506203</td>\n",
       "      <td>52</td>\n",
       "      <td>5</td>\n",
       "      <td>78</td>\n",
       "      <td>78</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>146</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>561.009376</td>\n",
       "      <td>57</td>\n",
       "      <td>11</td>\n",
       "      <td>66</td>\n",
       "      <td>66</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>168</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>750.614707</td>\n",
       "      <td>61</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>97</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>285.018192</td>\n",
       "      <td>34</td>\n",
       "      <td>3</td>\n",
       "      <td>78</td>\n",
       "      <td>78</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>144.191779</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1826</th>\n",
       "      <td>698</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3292.990827</td>\n",
       "      <td>164</td>\n",
       "      <td>5</td>\n",
       "      <td>3003</td>\n",
       "      <td>3003</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1828</th>\n",
       "      <td>110</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>386.960817</td>\n",
       "      <td>53</td>\n",
       "      <td>8</td>\n",
       "      <td>55</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1831</th>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>73.944586</td>\n",
       "      <td>17</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1832</th>\n",
       "      <td>656</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1564.151690</td>\n",
       "      <td>287</td>\n",
       "      <td>12</td>\n",
       "      <td>1540</td>\n",
       "      <td>1540</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1835</th>\n",
       "      <td>716</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2486.284792</td>\n",
       "      <td>363</td>\n",
       "      <td>16</td>\n",
       "      <td>3385</td>\n",
       "      <td>3367</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1836</th>\n",
       "      <td>242</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>909.330444</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1837</th>\n",
       "      <td>390</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2000.262075</td>\n",
       "      <td>126</td>\n",
       "      <td>6</td>\n",
       "      <td>432</td>\n",
       "      <td>429</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1838</th>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>191.262829</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1839</th>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>331.457042</td>\n",
       "      <td>29</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1840</th>\n",
       "      <td>249</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1352.494289</td>\n",
       "      <td>97</td>\n",
       "      <td>13</td>\n",
       "      <td>90</td>\n",
       "      <td>89</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1841</th>\n",
       "      <td>110</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>347.111927</td>\n",
       "      <td>20</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1849</th>\n",
       "      <td>165</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>634.821425</td>\n",
       "      <td>77</td>\n",
       "      <td>10</td>\n",
       "      <td>54</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1850</th>\n",
       "      <td>146</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>674.317585</td>\n",
       "      <td>34</td>\n",
       "      <td>3</td>\n",
       "      <td>120</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1852</th>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>191.262829</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1854</th>\n",
       "      <td>180</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>941.537852</td>\n",
       "      <td>36</td>\n",
       "      <td>9</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1857</th>\n",
       "      <td>232</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>568.288054</td>\n",
       "      <td>113</td>\n",
       "      <td>10</td>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1858</th>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>172.894667</td>\n",
       "      <td>22</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1859</th>\n",
       "      <td>370</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1791.855617</td>\n",
       "      <td>142</td>\n",
       "      <td>6</td>\n",
       "      <td>495</td>\n",
       "      <td>494</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1865</th>\n",
       "      <td>199</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>635.044367</td>\n",
       "      <td>74</td>\n",
       "      <td>11</td>\n",
       "      <td>153</td>\n",
       "      <td>153</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1866</th>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>297.189911</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1872</th>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>417.194861</td>\n",
       "      <td>21</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1874</th>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>841.909895</td>\n",
       "      <td>39</td>\n",
       "      <td>3</td>\n",
       "      <td>78</td>\n",
       "      <td>78</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1875</th>\n",
       "      <td>132</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>538.780681</td>\n",
       "      <td>49</td>\n",
       "      <td>5</td>\n",
       "      <td>78</td>\n",
       "      <td>78</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1880</th>\n",
       "      <td>389</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1036.513310</td>\n",
       "      <td>181</td>\n",
       "      <td>13</td>\n",
       "      <td>465</td>\n",
       "      <td>465</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1883</th>\n",
       "      <td>340</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1826.344659</td>\n",
       "      <td>101</td>\n",
       "      <td>20</td>\n",
       "      <td>210</td>\n",
       "      <td>210</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1888</th>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>622.885745</td>\n",
       "      <td>36</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>398</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2185.024269</td>\n",
       "      <td>192</td>\n",
       "      <td>14</td>\n",
       "      <td>253</td>\n",
       "      <td>253</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>46</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142.959549</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1893</th>\n",
       "      <td>96</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>411.727280</td>\n",
       "      <td>23</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1894</th>\n",
       "      <td>94</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>323.924804</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>945 rows × 143 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      LOC_test  NOA_test  NOPA_test  NOP_test  HALSTEAD_test  RFC_test  \\\n",
       "1          217         0          0         0     861.437324        34   \n",
       "2          219         2          0         2     931.606009       101   \n",
       "3          188         0          0         0    1018.168297        61   \n",
       "5          226         1          0         1    1276.067267        56   \n",
       "7          256         0          0         0     729.481772        66   \n",
       "8          311         2          0         2     953.928267       130   \n",
       "11          66         1          0         0     158.200170        28   \n",
       "22         294         1          0         1    1478.473523       106   \n",
       "25          34         0          0         0      57.244029         3   \n",
       "27         482         0          0         0    2324.190870       197   \n",
       "28          42         1          0         1     196.712572        14   \n",
       "29          42         1          0         1      81.698585         8   \n",
       "31         177         1          0         0     395.122311        82   \n",
       "32         292         1          0         1    1177.099392       161   \n",
       "33         261         0          0         0    1379.399838        74   \n",
       "34         437         5          0         0    1440.664017       110   \n",
       "35         396         0          0         0    2184.740672       187   \n",
       "36          42         0          0         0      88.533107        10   \n",
       "38         110         0          0         0     255.033887        36   \n",
       "40          40         0          0         0     123.814032         6   \n",
       "41          56         0          0         0     250.463229         3   \n",
       "42         118         0          0         0     587.211779        36   \n",
       "43          66         0          0         0     311.091852        15   \n",
       "44        1217        10          0         9    2532.778640        48   \n",
       "45         137         0          0         0     339.775205        73   \n",
       "47         133         0          0         0     279.506203        52   \n",
       "48         146         0          0         0     561.009376        57   \n",
       "50         168         1          0         1     750.614707        61   \n",
       "52          97         0          0         0     285.018192        34   \n",
       "53          51         0          0         0     144.191779        11   \n",
       "...        ...       ...        ...       ...            ...       ...   \n",
       "1826       698         1          0         1    3292.990827       164   \n",
       "1828       110         0          0         0     386.960817        53   \n",
       "1831        46         0          0         0      73.944586        17   \n",
       "1832       656         0          0         0    1564.151690       287   \n",
       "1835       716         2          0         2    2486.284792       363   \n",
       "1836       242         0          0         0     909.330444        12   \n",
       "1837       390         1          0         1    2000.262075       126   \n",
       "1838        63         0          0         0     191.262829        12   \n",
       "1839        88         0          0         0     331.457042        29   \n",
       "1840       249         1          0         1    1352.494289        97   \n",
       "1841       110         0          0         0     347.111927        20   \n",
       "1849       165         1          0         0     634.821425        77   \n",
       "1850       146         1          0         1     674.317585        34   \n",
       "1852        63         0          0         0     191.262829        11   \n",
       "1854       180         1          0         1     941.537852        36   \n",
       "1857       232         0          0         0     568.288054       113   \n",
       "1858        70         0          0         0     172.894667        22   \n",
       "1859       370         1          0         1    1791.855617       142   \n",
       "1865       199         0          0         0     635.044367        74   \n",
       "1866        60         1          0         1     297.189911         4   \n",
       "1872        80         0          0         0     417.194861        21   \n",
       "1874       158         0          0         0     841.909895        39   \n",
       "1875       132         0          0         0     538.780681        49   \n",
       "1880       389         0          0         0    1036.513310       181   \n",
       "1883       340         0          0         0    1826.344659       101   \n",
       "1888       155         0          0         0     622.885745        36   \n",
       "1890       398         0          0         0    2185.024269       192   \n",
       "1891        46         2          0         0     142.959549        12   \n",
       "1893        96         1          0         1     411.727280        23   \n",
       "1894        94         2          0         0     323.924804         9   \n",
       "\n",
       "      CBO_test  LCOM1_test  LCOM2_test  LCOM3_test  ...  No. ||_production  \\\n",
       "1            5          66          66           0  ...                  0   \n",
       "2           21         150          90          60  ...                  0   \n",
       "3           11          36          36           0  ...                 45   \n",
       "5            7         250         247           3  ...                  1   \n",
       "7            9          45          45           0  ...                  0   \n",
       "8           30          23           0         253  ...                  0   \n",
       "11           5           0           0          10  ...                  0   \n",
       "22          11         114         108           6  ...                  0   \n",
       "25           3           0           0           0  ...                  0   \n",
       "27          16         630         630           0  ...                  1   \n",
       "28          11           0           0           0  ...                  0   \n",
       "29           4           0           0           1  ...                  0   \n",
       "31           5          34          13          21  ...                  0   \n",
       "32           7         777         774           3  ...                  0   \n",
       "33           4         120         120           0  ...                  0   \n",
       "34           6         135          99          36  ...                  0   \n",
       "35          15         253         253           0  ...                  2   \n",
       "36           3           1           1           0  ...                  1   \n",
       "38           5          36          36           0  ...                  0   \n",
       "40           3           0           0           0  ...                  0   \n",
       "41           0           3           3           0  ...                  3   \n",
       "42           7          15          15           0  ...                  0   \n",
       "43           6           3           3           0  ...                  0   \n",
       "44           9          35           0          85  ...                  2   \n",
       "45           6         136         136           0  ...                  0   \n",
       "47           5          78          78           0  ...                  0   \n",
       "48          11          66          66           0  ...                  0   \n",
       "50           9           0           0          36  ...                  0   \n",
       "52           3          78          78           0  ...                  0   \n",
       "53           3          10          10           0  ...                  0   \n",
       "...        ...         ...         ...         ...  ...                ...   \n",
       "1826         5        3003        3003           0  ...                 10   \n",
       "1828         8          55          55           0  ...                  0   \n",
       "1831         3           6           6           0  ...                  0   \n",
       "1832        12        1540        1540           0  ...                  1   \n",
       "1835        16        3385        3367          18  ...                  0   \n",
       "1836         5           3           3           0  ...                  1   \n",
       "1837         6         432         429           3  ...                  0   \n",
       "1838         6          10          10           0  ...                  0   \n",
       "1839        12          15          15           0  ...                  0   \n",
       "1840        13          90          89           1  ...                  1   \n",
       "1841         9          10          10           0  ...                  0   \n",
       "1849        10          54          53           1  ...                  0   \n",
       "1850         3         120         120           0  ...                  1   \n",
       "1852         6          10          10           0  ...                  0   \n",
       "1854         9          19           0          36  ...                  0   \n",
       "1857        10          91          91           0  ...                  0   \n",
       "1858         7           6           6           0  ...                  0   \n",
       "1859         6         495         494           1  ...                  0   \n",
       "1865        11         153         153           0  ...                  0   \n",
       "1866        12           0           0           0  ...                  0   \n",
       "1872         6          10          10           0  ...                  0   \n",
       "1874         3          78          78           0  ...                  0   \n",
       "1875         5          78          78           0  ...                  0   \n",
       "1880        13         465         465           0  ...                  0   \n",
       "1883        20         210         210           0  ...                  0   \n",
       "1888         7          15          15           0  ...                  0   \n",
       "1890        14         253         253           0  ...                  2   \n",
       "1891         4           0           0           1  ...                  0   \n",
       "1893         8           0           0           6  ...                  0   \n",
       "1894         3           0           0           1  ...                  1   \n",
       "\n",
       "      No. Try_production  No. Catch_production  No. Loop_production  \\\n",
       "1                      0                     0                    0   \n",
       "2                      0                     0                    0   \n",
       "3                      0                     0                    1   \n",
       "5                      0                     0                    2   \n",
       "7                      0                     0                    0   \n",
       "8                      0                     0                    0   \n",
       "11                     1                     1                    0   \n",
       "22                     0                     0                    6   \n",
       "25                     0                     0                    0   \n",
       "27                     1                     1                    5   \n",
       "28                     0                     0                    0   \n",
       "29                     0                     0                    0   \n",
       "31                     0                     0                    0   \n",
       "32                     0                     0                    0   \n",
       "33                     0                     0                    0   \n",
       "34                     0                     0                    1   \n",
       "35                     1                     1                    1   \n",
       "36                     0                     0                    0   \n",
       "38                     0                     0                    0   \n",
       "40                     0                     0                    0   \n",
       "41                     1                     1                    1   \n",
       "42                     1                     1                    0   \n",
       "43                     0                     0                    2   \n",
       "44                     0                     0                    8   \n",
       "45                     0                     0                    0   \n",
       "47                     1                     1                    0   \n",
       "48                     0                     0                    0   \n",
       "50                     0                     0                    0   \n",
       "52                     0                     0                    2   \n",
       "53                     0                     0                    0   \n",
       "...                  ...                   ...                  ...   \n",
       "1826                   0                     0                    8   \n",
       "1828                   0                     0                    0   \n",
       "1831                   0                     0                    0   \n",
       "1832                   1                     1                    3   \n",
       "1835                   1                     1                    0   \n",
       "1836                   0                     0                    5   \n",
       "1837                   0                     0                    0   \n",
       "1838                   0                     0                    0   \n",
       "1839                   0                     0                    2   \n",
       "1840                   0                     0                    1   \n",
       "1841                   0                     0                    1   \n",
       "1849                   0                     0                    2   \n",
       "1850                   0                     0                    5   \n",
       "1852                   0                     0                    0   \n",
       "1854                   0                     0                    8   \n",
       "1857                   0                     0                    0   \n",
       "1858                   0                     0                    0   \n",
       "1859                   0                     0                    0   \n",
       "1865                   3                     3                    0   \n",
       "1866                   0                     0                    1   \n",
       "1872                   0                     0                    0   \n",
       "1874                   0                     0                    0   \n",
       "1875                   0                     0                    1   \n",
       "1880                   1                     1                    1   \n",
       "1883                   0                     0                    0   \n",
       "1888                   0                     0                    1   \n",
       "1890                   1                     1                    1   \n",
       "1891                   0                     0                    0   \n",
       "1893                   0                     0                    0   \n",
       "1894                   0                     0                    2   \n",
       "\n",
       "      No. Break_production  No. Continue_production  \\\n",
       "1                        0                        0   \n",
       "2                        0                        0   \n",
       "3                        0                        0   \n",
       "5                        4                        0   \n",
       "7                        0                        0   \n",
       "8                        0                        0   \n",
       "11                       0                        0   \n",
       "22                       0                        0   \n",
       "25                       0                        0   \n",
       "27                       0                        0   \n",
       "28                       0                        0   \n",
       "29                       0                        0   \n",
       "31                       0                        0   \n",
       "32                       0                        0   \n",
       "33                       0                        0   \n",
       "34                       0                        0   \n",
       "35                       0                        0   \n",
       "36                       0                        0   \n",
       "38                       0                        0   \n",
       "40                       0                        0   \n",
       "41                       0                        0   \n",
       "42                       0                        0   \n",
       "43                       0                        0   \n",
       "44                       0                        0   \n",
       "45                       0                        0   \n",
       "47                       0                        0   \n",
       "48                       0                        0   \n",
       "50                       0                        0   \n",
       "52                       0                        0   \n",
       "53                       0                        0   \n",
       "...                    ...                      ...   \n",
       "1826                    17                        1   \n",
       "1828                     0                        0   \n",
       "1831                     0                        0   \n",
       "1832                     4                        0   \n",
       "1835                     0                        0   \n",
       "1836                     0                        0   \n",
       "1837                     0                        0   \n",
       "1838                     0                        0   \n",
       "1839                     0                        0   \n",
       "1840                     0                        0   \n",
       "1841                     0                        0   \n",
       "1849                     2                        0   \n",
       "1850                     0                        0   \n",
       "1852                     0                        0   \n",
       "1854                     0                        0   \n",
       "1857                     0                        0   \n",
       "1858                     0                        0   \n",
       "1859                     0                        0   \n",
       "1865                     0                        0   \n",
       "1866                     0                        0   \n",
       "1872                     0                        0   \n",
       "1874                     0                        0   \n",
       "1875                     0                        0   \n",
       "1880                     2                        0   \n",
       "1883                     0                        0   \n",
       "1888                     0                        0   \n",
       "1890                     0                        0   \n",
       "1891                     0                        0   \n",
       "1893                     0                        0   \n",
       "1894                     0                        0   \n",
       "\n",
       "      No. Conditions_production  No. Else_production  No. Ternary_production  \\\n",
       "1                             5                    4                       0   \n",
       "2                             0                    0                       0   \n",
       "3                             4                    2                       0   \n",
       "5                            13                    3                       0   \n",
       "7                             3                    0                       0   \n",
       "8                             2                    0                       0   \n",
       "11                            1                    0                       0   \n",
       "22                            6                    0                       0   \n",
       "25                            0                    0                       0   \n",
       "27                           18                    3                       2   \n",
       "28                            5                    0                       0   \n",
       "29                            0                    0                       0   \n",
       "31                            4                    1                       0   \n",
       "32                            0                    0                       0   \n",
       "33                            6                    3                       7   \n",
       "34                           12                    5                       0   \n",
       "35                            9                    1                       0   \n",
       "36                            4                    0                       1   \n",
       "38                            1                    0                       0   \n",
       "40                            0                    0                       0   \n",
       "41                            3                    0                       1   \n",
       "42                            3                    0                       0   \n",
       "43                            3                    0                       0   \n",
       "44                           14                    2                       0   \n",
       "45                            1                    0                       0   \n",
       "47                            2                    0                       0   \n",
       "48                            0                    0                       0   \n",
       "50                            0                    0                       0   \n",
       "52                            0                    0                       1   \n",
       "53                            3                    0                       0   \n",
       "...                         ...                  ...                     ...   \n",
       "1826                         37                    5                       0   \n",
       "1828                          2                    1                       0   \n",
       "1831                          0                    0                       0   \n",
       "1832                         19                    2                       0   \n",
       "1835                          5                    1                       0   \n",
       "1836                          5                    2                       0   \n",
       "1837                          9                    0                       0   \n",
       "1838                          1                    1                       0   \n",
       "1839                          1                    0                       0   \n",
       "1840                          3                    0                       0   \n",
       "1841                          1                    0                       0   \n",
       "1849                         14                    1                       0   \n",
       "1850                         12                    5                       0   \n",
       "1852                          1                    1                       0   \n",
       "1854                          5                    0                       0   \n",
       "1857                          2                    0                       0   \n",
       "1858                          0                    0                       0   \n",
       "1859                          9                    0                       0   \n",
       "1865                          0                    0                       0   \n",
       "1866                          0                    0                       0   \n",
       "1872                          1                    0                       0   \n",
       "1874                          6                    1                       0   \n",
       "1875                          0                    0                       0   \n",
       "1880                         18                    5                       0   \n",
       "1883                          0                    0                       0   \n",
       "1888                          4                    0                       0   \n",
       "1890                         10                    1                       0   \n",
       "1891                          1                    0                       0   \n",
       "1893                          0                    0                       0   \n",
       "1894                          4                    1                       0   \n",
       "\n",
       "      mutation  \n",
       "1            1  \n",
       "2            1  \n",
       "3            1  \n",
       "5            1  \n",
       "7            1  \n",
       "8            1  \n",
       "11           1  \n",
       "22           1  \n",
       "25           1  \n",
       "27           1  \n",
       "28           1  \n",
       "29           1  \n",
       "31           1  \n",
       "32           1  \n",
       "33           1  \n",
       "34           1  \n",
       "35           1  \n",
       "36           1  \n",
       "38           1  \n",
       "40           1  \n",
       "41           1  \n",
       "42           1  \n",
       "43           1  \n",
       "44           1  \n",
       "45           1  \n",
       "47           1  \n",
       "48           1  \n",
       "50           1  \n",
       "52           1  \n",
       "53           1  \n",
       "...        ...  \n",
       "1826         1  \n",
       "1828         1  \n",
       "1831         1  \n",
       "1832         1  \n",
       "1835         1  \n",
       "1836         1  \n",
       "1837         1  \n",
       "1838         1  \n",
       "1839         1  \n",
       "1840         1  \n",
       "1841         1  \n",
       "1849         1  \n",
       "1850         1  \n",
       "1852         1  \n",
       "1854         1  \n",
       "1857         1  \n",
       "1858         1  \n",
       "1859         1  \n",
       "1865         1  \n",
       "1866         1  \n",
       "1872         1  \n",
       "1874         1  \n",
       "1875         1  \n",
       "1880         1  \n",
       "1883         1  \n",
       "1888         1  \n",
       "1890         1  \n",
       "1891         1  \n",
       "1893         1  \n",
       "1894         1  \n",
       "\n",
       "[945 rows x 143 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "good_tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
